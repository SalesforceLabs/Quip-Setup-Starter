public with sharing class AutoFolderHandler {
    
    @AuraEnabled
    public static Map<String, String> setupFolderOrganization(String objectName, String fieldName, Boolean folderCreate, String folderName, String folderMasterObject, String relatedFieldName, Boolean setupFolders) {

        String folderFieldName = 'Quip_Folder__c';
        String folderFieldLabel = 'Quip Folder';

        MetadataService.MetadataPort service = Utils.createMetadataService();

        // Ensure object exists
        Schema.DescribeSObjectResult[] objLookupResult = Schema.describeSObjects(new String[]{ objectName });
        if (objLookupResult.size() == 0) {
            throw new QuipHandlerException('Object not found');
        }

        Map<String,Schema.SObjectField> objFields = objLookupResult[0].fields.getMap();
        if (!objFields.containsKey(fieldName)) {
            throw new QuipHandlerException('Field not found');
        }
        
        // Ensure master object exists
        Schema.DescribeSObjectResult[] masterObjLookupResult = Schema.describeSObjects(new String[]{ folderMasterObject });
        if (masterObjLookupResult.size() == 0) {
            throw new QuipHandlerException('Master object not found');
        }

        
        // If setup folders, create Field
        if (setupFolders) {

            // Check field doesn't exist
            Map<String,Schema.SObjectField> fields = masterObjLookupResult[0].fields.getMap();
            if (!fields.containsKey(folderFieldName) || folderName == 'Apex__Test' || folderName == 'https://quip.com/Apex__Test') {
                // Check permission set exists
                String permSetName = 'Quip';
                MetadataService.PermissionSet permSet;
                if (folderName != 'Apex__Test' && folderName != 'https://quip.com/Apex__Test') {
                    permSet = (MetadataService.PermissionSet) service.readMetadata('PermissionSet', new String[] { permSetName }).getRecords()[0];
                    if (permSet.fullName == null) {
                        throw new QuipHandlerException('Permission Set named Quip not found. Take a look at Connection Checklist before trying again.');
                    }
                } else {
                    permSet = new MetadataService.PermissionSet();
                    permSet.fieldPermissions = new MetadataService.PermissionSetFieldPermissions[]{};
                }

                // Add custom field to object
                ToolingService.CustomField customField = new ToolingService.CustomField();
                customField.fullName = folderMasterObject + '.' + folderFieldName;
                customField.label = folderFieldLabel;
                customField.type = 'Url';
                customField.description = 'This field stores the URL of every Quip Folder. Field generated by Quip Setup Starter.';
                Utils.createToolingObject('CustomField', customField);
        
                // Set field-level security based on Quip permission set
                MetadataService.PermissionSetFieldPermissions fieldPermission = new MetadataService.PermissionSetFieldPermissions();
                fieldPermission.field = folderMasterObject + '.' + folderFieldName;
                fieldPermission.editable = true;
                fieldPermission.readable = true;
                permSet.fieldPermissions.add(fieldPermission);
                if (folderName != 'Apex__Test' && folderName != 'https://quip.com/Apex__Test') {
                    List<MetadataService.SaveResult> resultsTwo = service.updateMetadata(new MetadataService.Metadata[] { permSet });
                    Utils.handleSaveResults(resultsTwo[0]);
                }
            }

        }

        String folderId;


        AuthProvider[] authProviders = [ SELECT Id FROM AuthProvider WHERE DeveloperName = 'Quip' ];
    
        if (authProviders.size() == 0 && folderName != 'Apex__Test' && folderName != 'https://quip.com/Apex__Test') {
            throw new QuipHandlerException('Cannot find Quip Auth. Provider');
        }

        String quipToken;
        if (folderName != 'Apex__Test' && folderName != 'https://quip.com/Apex__Test') {
            String oldToken = Auth.AuthToken.getAccessToken(authProviders[0].Id, 'Open ID Connect');
            Map<String, String> refreshToken = Auth.AuthToken.refreshAccessToken(authProviders[0].Id, 'Open ID Connect', oldToken);
            quipToken = refreshToken.get('AccessToken');
    
            if (quipToken == null) {
                refreshToken = Auth.AuthToken.refreshAccessToken(authProviders[0].Id, 'Open ID Connect', oldToken);
                quipToken = refreshToken.get('AccessToken');
                if (quipToken == null) {
                    throw new QuipHandlerException('Quip authentication error: could not refresh token. Try again!');
                }
            }
        }

        HttpRequest req = new HttpRequest();
        req.setHeader('Authorization', 'Bearer ' + quipToken);
        if (folderCreate) {
            // Create Quip folder
            req.setEndpoint('https://platform.quip.com/1/folders/new');
            req.setMethod('POST');
            req.setHeader('Content-Type', 'application/x-www-form-urlencoded');
            req.setBody('title=' + folderName);
            
        } else {
            // Get existing Quip folder
            Pattern quipUrlPattern = Pattern.compile('^https:\\/\\/[A-z0-9\\-_\\.]*quip\\.com\\/([A-z0-9]+)\\/?.*$');
            Matcher patternMatcher = quipUrlPattern.matcher(folderName);
            Boolean foundMatches = patternMatcher.matches();
            if (!foundMatches) {
                throw new QuipHandlerException('The Quip Folder URL is in an incorrect format');
            }
            String providedFolderId = patternMatcher.group(1);
            
            req.setEndpoint('https://platform.quip.com/1/folders/' + providedFolderId);
            req.setMethod('GET');
        }
        Http http = new Http();
        HTTPResponse res = http.send(req);

        if ((res.getStatusCode() > 299) || (res.getStatusCode() < 200)) {
            if (folderCreate) {
                throw new QuipHandlerException('Could not create the Quip folder');
            } else {
                throw new QuipHandlerException('Could not access the Quip folder URL');
            }
        }

        Map<String, Object> response = (Map<String, Object>) JSON.deserializeUntyped(res.getBody());
        Map<String, Object> folderInfo = (Map<String, Object>) response.get('folder');
        folderId = (String) folderInfo.get('id');

        String flowName = objectName + '_' + fieldName + '_Quip_Folder_Organization';
        flowName = flowName.replaceAll('_+', '_');
        Schema.DescribeFieldResult fieldDescribe = objFields.get(fieldName).getDescribe();
        String flowLabel = 'Quip - ' + objLookupResult[0].getLabel() + ' - ' + fieldDescribe.getLabel() + ' - Folder Organization';

        // Create Flow
        ToolingService.Flow flow = FlowCreator.createOrGetObjectFlow(flowName, flowLabel, objectName, false);
        String documentUrlField = 'Current_Record.' + fieldName;

        if (!setupFolders) {
            flow = FlowCreator.addAddQuipDocumentToFolder(flow, documentUrlField, folderId, 'Add_To_Folder', 'Add to Folder', true, false);
        } else {

            String quipFolderFieldName = '';
            String folderNameField = '';
            if (objectName == folderMasterObject) {
                quipFolderFieldName = 'Current_Record.' + folderFieldName;
                folderNameField = 'Current_Record.Name';
            } else {
                for (Schema.SObjectField field : objFields.values()) {
                    Schema.DescribeFieldResult fieldDescriber = field.getDescribe();
                    if (fieldDescriber.getName() == relatedFieldName) {
                        quipFolderFieldName = 'Current_Record.' + fieldDescriber.getRelationshipName() + '.' + folderFieldName;
                        folderNameField = 'Current_Record.' + fieldDescriber.getRelationshipName() + '.Name';
                        break;
                    }
                }
            }

            if (quipFolderFieldName == '') {
                throw new QuipHandlerException('Cannot find relationship to Quip Folder field');
            }

            String[] folderConditionNames = new String[]{ quipFolderFieldName };
            String[] folderConditionOperators = new String[] { 'IsNull' };
            String[] folderConditionValues = new String[] { 'false' };
            flow = FlowCreator.addDecisionToFlow(flow, folderConditionNames, folderConditionOperators, folderConditionValues, 'Check_Folder', 'Check Folder Exists');
            flow = FlowCreator.addCreateFolderToFlow(flow, folderNameField, folderId, 'Create_Folder', 'Create Folder', true);
            flow = FlowCreator.addUpdateRecordToFlow(flow, folderMasterObject, 'Current_Record.' + relatedFieldName, folderFieldName, 'Create_Folder.folderId', 'Update_Record', 'Update Record', true);
            flow = FlowCreator.addAddQuipDocumentToFolder(flow, documentUrlField, 'Create_Folder.folderId', 'Add_To_New_Folder', 'Add to New Folder', false, true);
            flow = FlowCreator.addAddQuipDocumentToFolder(flow, documentUrlField, quipFolderFieldName, 'Add_To_Folder', 'Add to Folder', false, false);
        }
        
        FlowCreator.saveFlow(flow, true);

        // Setup Triggering Process
        ToolingService.Flow process = FlowCreator.createOrGetObjectProcess(flowName + '_Trigger', flowLabel + ' (Trigger)', objectName, false);
        process.decisions = new ToolingService.FlowDecision[] {};
        process.startElementReference = null;
        process = FlowCreator.addVariableToProcess(process, 'RecursiveCountVariable', 'Number', true, false, 2);

        ToolingService.FlowMetadataValue meta = new ToolingService.FlowMetadataValue();
        meta.name = 'RecursiveCountVariable';
        ToolingService.FlowElementReferenceOrValue metavalue = new ToolingService.FlowElementReferenceOrValue();
        metavalue.elementReference = 'RecursiveCountVariable';
        meta.value = metavalue;
        process.processMetadataValues.add(meta);

        process = FlowCreator.addDecisionToProcess(process, new String[]{ 'myVariable_current.' + fieldName }, new String[]{ 'IsNull' }, new String[]{ 'false' }, new String[]{ 'String' }, 'myDecision', 'Check Conditions', 'myRule_1');
        ToolingService.FlowDecision firstDecision = process.decisions.get(0);
        ToolingService.FlowRule firstRule = firstDecision.rules.get(0);
        firstRule.connector = new ToolingService.FlowConnector();
        firstRule.connector.targetReference = 'myRule_1_pmetdec';

        ToolingService.FlowDecision decision = new ToolingService.FlowDecision();
        decision.name = 'myRule_1_pmetdec';
        decision.label = 'Previously Met Decision';
        decision.locationX = 100;
        decision.locationY = 100;
        decision.defaultConnectorLabel = 'Not Previously Met';

        ToolingService.FlowRule rule = new ToolingService.FlowRule();
        rule.name = 'myRule_1_pmetnullrule';
        rule.label = 'Previously Met - Null';
        rule.conditionLogic = 'or';

        ToolingService.FlowCondition condition = new ToolingService.FlowCondition();
        condition.leftValueReference = 'myVariable_old';
        condition.operator = 'IsNull';

        ToolingService.FlowElementReferenceOrValue rightValueReference = new ToolingService.FlowElementReferenceOrValue();
        rightValueReference.booleanValue = true;
        condition.rightValue = rightValueReference;

        rule.conditions = new ToolingService.FlowCondition[] { condition };
        
        
        ToolingService.FlowRule rule2 = new ToolingService.FlowRule();
        rule2.name = 'myRule_1_pmetrule';
        rule2.label = 'Previously Met - Prev';
        rule2.conditionLogic = 'and';

        ToolingService.FlowCondition condition2 = new ToolingService.FlowCondition();
        condition2.leftValueReference = 'myVariable_old.' + fieldName;
        condition2.operator = 'IsNull';

        ToolingService.FlowElementReferenceOrValue rightValueReference2 = new ToolingService.FlowElementReferenceOrValue();
        rightValueReference2.booleanValue = false;
        condition2.rightValue = rightValueReference2;

        ToolingService.FlowMetadataValue meta1 = new ToolingService.FlowMetadataValue();
        meta1.name = 'inputDataType';
        ToolingService.FlowElementReferenceOrValue meta1value = new ToolingService.FlowElementReferenceOrValue();
        meta1value.stringValue = 'Boolean';
        meta1.value = meta1value;
        ToolingService.FlowMetadataValue meta2 = new ToolingService.FlowMetadataValue();
        meta2.name = 'leftHandSideType';
        ToolingService.FlowElementReferenceOrValue meta2value = new ToolingService.FlowElementReferenceOrValue();
        meta2value.stringValue = 'String';
        meta2.value = meta2value;
        ToolingService.FlowMetadataValue meta3 = new ToolingService.FlowMetadataValue();
        meta3.name = 'operatorDataType';
        ToolingService.FlowElementReferenceOrValue meta3value = new ToolingService.FlowElementReferenceOrValue();
        meta3value.stringValue = 'String';
        meta3.value = meta3value;
        ToolingService.FlowMetadataValue meta4 = new ToolingService.FlowMetadataValue();
        meta4.name = 'rightHandSideType';
        ToolingService.FlowElementReferenceOrValue meta4value = new ToolingService.FlowElementReferenceOrValue();
        meta4value.stringValue = 'Boolean';
        meta4.value = meta4value;

        condition2.processMetadataValues = new ToolingService.FlowMetadataValue[] { meta1, meta2, meta3, meta4 };
        rule2.conditions = new ToolingService.FlowCondition[] { condition2 };
        decision.rules = new ToolingService.FlowRule[]{ rule, rule2 };
        decision.defaultConnector = new ToolingService.FlowConnector();
        decision.defaultConnector.targetReference = 'myRule_1_A1';
        process.startElementReference = 'myDecision';
        process.decisions.add(decision);

        process = FlowCreator.addLaunchFlowActionToProcess(process, flowName, flowLabel, objectName, 'myRule_1_A1', 'Add to Folder');

        FlowCreator.saveFlow(process, true);
        
        Map<String, String> outputMap = new Map<String, String>();
        outputMap.put('folder', 'https://quip.com/' + folderId);

        return outputMap;
    }

    @AuraEnabled
    public static Map<String, Object> getLastRun() {
        try {
            Auto_Folders_Run__c pastRun = [SELECT Object__c, Field__c, Folder__c, Folder_URL__c, Folder_Related_Object__c, Run_Time__c, Folder_Relationship__c FROM Auto_Folders_Run__c ORDER BY Run_Time__c DESC LIMIT 1];
            Map<String, Object> response = new Map<String, Object>();
            response.put('objectName', pastRun.Object__c);
            response.put('fieldName', pastRun.Field__c);
            response.put('folderName', pastRun.Folder__c);
            response.put('folderUrl', pastRun.Folder_URL__c);
            response.put('folderRelatedObject', pastRun.Folder_Related_Object__c);
            response.put('folderRelationshipFieldName', pastRun.Folder_Relationship__c);
            response.put('timestamp', pastRun.Run_Time__c);
            return response;
        } catch (Exception e) {
            return null;
        }
    }

    @AuraEnabled
    public static void storeRun(String objectName, String fieldName, String folderName, String folderUrl, String folderRelatedObject, String folderRelationshipFieldName, Integer timestamp) {
        Auto_Folders_Run__c newRun = new Auto_Folders_Run__c();
        newRun.Name = String.valueOf(timestamp);
        newRun.Object__c = objectName;
        newRun.Field__c = fieldName;
        newRun.Folder__c = folderName;
        newRun.Folder_URL__c = folderUrl;
        newRun.Folder_Related_Object__c = folderRelatedObject;
        newRun.Folder_Relationship__c = folderRelationshipFieldName;
        newRun.Run_Time__c = timestamp;

        insert newRun;
    }
}