public with sharing class AccountPlanHandler {

    @AuraEnabled
    public static Map<String, String> deployAccountPlan(String objectName, String fieldName, Boolean copyTemplate, String templateUrl, String pageId, boolean copyPage, String tabName, String sharingLevel) {

        MetadataService.MetadataPort service = Utils.createMetadataService();

        // Create Custom Field

        // Ensure object exists
        Schema.DescribeSObjectResult[] objLookupResult = Schema.describeSObjects(new String[]{ objectName });
        if (objLookupResult.size() == 0) {
            throw new QuipHandlerException('Object not found');
        }

        // Check field doesn't exist
        Map<String,Schema.SObjectField> fields = objLookupResult[0].fields.getMap();
        if (!fields.containsKey(fieldName) || templateUrl == 'https://quip.com/test') {
            // Check permission set exists
            String permSetName = 'Quip';
            MetadataService.PermissionSet permSet;
            if (templateUrl != 'https://quip.com/test') {
                permSet = (MetadataService.PermissionSet) service.readMetadata('PermissionSet', new String[] { permSetName }).getRecords()[0];
                if (permSet.fullName == null) {
                    throw new QuipHandlerException('Permission Set named Quip not found. Take a look at Connection Checklist before trying again.');
                }
            } else {
                permSet = new MetadataService.PermissionSet();
                permSet.fieldPermissions = new MetadataService.PermissionSetFieldPermissions[]{};
            }

            // Add custom field to object
            ToolingService.CustomField customField = new ToolingService.CustomField();
            customField.fullName = objectName + '.' + fieldName;
            customField.label = tabName;
            customField.type = 'Url';
            customField.description = 'This field stores the Quip URL of every account plan. Field generated by Quip Setup Starter.';
            Utils.createToolingObject('CustomField', customField);
    
            // Set field-level security based on Quip permission set
            MetadataService.PermissionSetFieldPermissions fieldPermission = new MetadataService.PermissionSetFieldPermissions();
            fieldPermission.field = objectName + '.' + fieldName;
            fieldPermission.editable = true;
            fieldPermission.readable = true;
            permSet.fieldPermissions.add(fieldPermission);
            if (templateUrl != 'https://quip.com/test') {
                List<MetadataService.SaveResult> resultsTwo = service.updateMetadata(new MetadataService.Metadata[] { permSet });
                Utils.handleSaveResults(resultsTwo[0]);
            }
        }

        
        ToolingService.FlexiPage page = Utils.getPageById(pageId);
        if (page == null) {
            throw new QuipHandlerException('Page not found');
        }
        String finalPageId = pageId;

        // (optional) Copy page
        if (copyPage) {
            String newName = page.fullName + '_Quip_AccountPlan';
            page.fullName = newName;

            // Check if copy exists already
            ToolingService.FlexiPage pageCopy = Utils.getPageByName(newName);
            if (pageCopy != null) {
                page = pageCopy;

                Map<String, Object> copyQueryResult = Utils.toolingQuery('SELECT Id FROM FlexiPage WHERE DeveloperName = \'' + newName + '\'');
                Integer copyResults = (Integer) copyQueryResult.get('size');
                if (copyResults == 0) {
                    throw new QuipHandlerException('Page not found');
                }

                List<Object> copyRecords = (List<Object>) copyQueryResult.get('records');
                Map<String, Object> copyRecordMap = (Map<String, Object>) copyRecords[0];
                finalPageId = (String) copyRecordMap.get('Id');
            } else {
                page.masterLabel = page.masterLabel + ' - with Quip Account Plan';
                String newPageId = Utils.createToolingObject('FlexiPage', page);
                finalPageId = newPageId;
            }
        }

        // Copy Quip template and link share

        String quipTemplateUrl = templateUrl;

        // Get thread ID
        Pattern quipUrlPattern = Pattern.compile('^https:\\/\\/[A-z0-9\\-_\\.]*quip\\.com\\/([A-z0-9]+)\\/?.*$');
        Matcher patternMatcher = quipUrlPattern.matcher(templateUrl);
        Boolean foundMatches = patternMatcher.matches();
        if (!foundMatches) {
            throw new QuipHandlerException('Template thread ID not found');
        }
        String threadId = patternMatcher.group(1);

        AuthProvider[] authProviders = [ SELECT Id FROM AuthProvider WHERE DeveloperName = 'Quip' ];
    
        if (authProviders.size() == 0 && templateUrl != 'https://quip.com/test') {
            throw new QuipHandlerException('Cannot find Quip Auth. Provider');
        }

        String quipToken = '';

        if (templateUrl != 'https://quip.com/test') {
            String oldToken = Auth.AuthToken.getAccessToken(authProviders[0].Id, 'Open ID Connect');
            Map<String, String> refreshToken = Auth.AuthToken.refreshAccessToken(authProviders[0].Id, 'Open ID Connect', oldToken);
            quipToken = refreshToken.get('AccessToken');
        }

        if (quipToken == null) {
            if (templateUrl != 'https://quip.com/test') {
                String oldToken = Auth.AuthToken.getAccessToken(authProviders[0].Id, 'Open ID Connect');
                Map<String, String> refreshToken = Auth.AuthToken.refreshAccessToken(authProviders[0].Id, 'Open ID Connect', oldToken);
                quipToken = refreshToken.get('AccessToken');
            }
            if (quipToken == null) {
                throw new QuipHandlerException('Quip authentication error: could not refresh token. Try again!');
            }
        }

        // Copy template
        if (copyTemplate) {
            HttpRequest req = new HttpRequest();
            req.setEndpoint('https://platform.quip.com/1/threads/copy-document');
            req.setMethod('POST');
            req.setHeader('Authorization', 'Bearer ' + quipToken);
            req.setHeader('Content-Type', 'application/x-www-form-urlencoded');
            req.setBody('thread_id=' + threadId);
            Http http = new Http();
            HTTPResponse res = http.send(req);
    
            if ((res.getStatusCode() > 299) || (res.getStatusCode() < 200)) {
                throw new QuipHandlerException('Could not create the Quip template');
            }
    
            Map<String, Object> response = (Map<String, Object>) JSON.deserializeUntyped(res.getBody());
            Map<String, Object> threadInfo = (Map<String, Object>) response.get('thread');
            if (templateUrl != 'https://quip.com/test') {
                quipTemplateUrl = (String) threadInfo.get('link');
                threadId = (String) threadInfo.get('id');
            }
        }

        // Link share
        HttpRequest req2 = new HttpRequest();
        req2.setEndpoint('https://platform.quip.com/1/threads/edit-share-link-settings');
        req2.setMethod('POST');
        req2.setHeader('Authorization', 'Bearer ' + quipToken);
        req2.setHeader('Content-Type', 'application/x-www-form-urlencoded');
        req2.setBody('thread_id=' + threadId + '&mode=view');
        Http http2 = new Http();
        HTTPResponse res2 = http2.send(req2);

        if ((res2.getStatusCode() > 299) || (res2.getStatusCode() < 200)) {
            throw new QuipHandlerException('Could not link share the Quip template. Ensure you have full access to the template and the USER_MANAGE permission on the API Key in Quip Admin Console to continue.');
        }


        // Add component to page
        
        /// Find the right tabset
        Boolean foundRegion = false;

        if (templateUrl == 'https://quip.com/test') {
            ToolingService.FlexiPageRegion r = new ToolingService.FlexiPageRegion();
            ToolingService.ComponentInstance cmp = new ToolingService.ComponentInstance();
            r.name = 'main';
            cmp.componentName = 'flexipage:tabset';
            ToolingService.ComponentInstanceProperty prop = new ToolingService.ComponentInstanceProperty();
            prop.name = 'title';
            prop.value = tabName;
            cmp.componentInstanceProperties = new ToolingService.ComponentInstanceProperty[] { prop };
            r.componentInstances = new ToolingService.ComponentInstance[] { cmp };
            page.flexiPageRegions = new ToolingService.FlexiPageRegion[] { r };
        }

        // Search in main region first
        Boolean mainRegionHasTabSet = false;
        for (ToolingService.FlexiPageRegion region : page.flexiPageRegions) {
            if (region.name == 'main') {
                if (region.componentInstances != null) {
                    for (ToolingService.ComponentInstance cmp : region.componentInstances) {
                        if (cmp.componentName == 'flexipage:tabset') {
                            mainRegionHasTabSet = true;
                            break;
                        }
                    }
                }
            }
        }

        for (ToolingService.FlexiPageRegion region : page.flexiPageRegions) {
            if (region.name == 'header') {
                continue;
            }

            if (mainRegionHasTabSet && region.name != 'main') {
                continue;
            }

            Boolean foundTabSet = false;

            if (region.componentInstances != null) {
                for (ToolingService.ComponentInstance cmp : region.componentInstances) {
                    if (cmp.componentName == 'flexipage:tabset') {
                        // Found tab set
                        foundTabSet = true;
                        foundRegion = true;
                        String tabsetFacetName;
                        for (ToolingService.ComponentInstanceProperty prop : cmp.componentInstanceProperties) {
                            if (prop.name == 'tabs') {
                                tabsetFacetName = prop.value;
                                break;
                            }
                        }
    
                        for (ToolingService.FlexiPageRegion aRegion : page.flexiPageRegions) {
                            if (aRegion.name == tabsetFacetName) {
                                // Found tab set facet
    
                                Blob b = Crypto.GenerateAESKey(128);
                                String h = EncodingUtil.ConvertTohex(b);
                                String guid = h.SubString(0,8)+ '-' + h.SubString(8,12) + '-' + h.SubString(12,16) + '-' + h.SubString(16,20) + '-' + h.substring(20);
                                
                                // Crete new facet with Quip document
    
                                ToolingService.FlexiPageRegion newRegion = new ToolingService.FlexiPageRegion();
                                newRegion.name = 'Facet-' + guid;
                                newRegion.type = 'Facet';
    
                                ToolingService.ComponentInstance newQuipDoc = Utils.generateQuipComponent(fieldName, quipTemplateUrl, tabName, sharingLevel);
    
                                newRegion.componentInstances = new ToolingService.ComponentInstance[]{ newQuipDoc };
                                page.flexiPageRegions.add(newRegion);
    
                                // Add new tab
    
                                ToolingService.ComponentInstance newTab = new ToolingService.ComponentInstance();
                                newTab.componentName = 'flexipage:tab';
                                ToolingService.ComponentInstanceProperty tabTitle = new ToolingService.ComponentInstanceProperty();
                                tabTitle.name = 'title';
                                tabTitle.value = tabName;
                                ToolingService.ComponentInstanceProperty tabBody = new ToolingService.ComponentInstanceProperty();
                                tabBody.name = 'body';
                                tabBody.value = newRegion.name;
    
                                newTab.componentInstanceProperties = new ToolingService.ComponentInstanceProperty[] { tabTitle, tabBody };
    
                                aRegion.componentInstances.add(newTab);
    
                                break;
                            }
                        }
                        break;
                    }
                }
            }


            if (foundTabSet) {
                break;
            }
        }

        if (!foundRegion) {
            // No tabs found
            String myRegion;
            for (ToolingService.FlexiPageRegion region : page.flexiPageRegions) {
                if (region.name == 'main') {
                    myRegion = region.name;
                    break;
                }
            }

            if (myRegion == null) {
                for (ToolingService.FlexiPageRegion region : page.flexiPageRegions) {
                    if (region.name != 'header') {
                        myRegion = region.name;
                        break;
                    }
                }
            }

            if (myRegion != null) {
                for (ToolingService.FlexiPageRegion region : page.flexiPageRegions) {
                    if (region.name == myRegion) {
                        myRegion = region.name;
                        ToolingService.ComponentInstance newQuipDoc = Utils.generateQuipComponent(fieldName, quipTemplateUrl, 'Account Plan', sharingLevel);
                        region.componentInstances.add(newQuipDoc);
                        break;
                    }
                }
            } else {
                throw new QuipHandlerException('Could not find a place to add Account Plan on the page');
            }
        }

        try {
            Utils.updateToolingObjectMetadata('FlexiPage', finalPageId, page);
        } catch (Exception e) {
            throw new QuipHandlerException('Could not update Lightning Record Page. Check that all Lightning components are configured correctly on the page, then try again');
        }

        Map<String, String> outputMap = new Map<String, String>();
        outputMap.put('page', finalPageId);
        outputMap.put('document', quipTemplateUrl);

        return outputMap;
    }

    @AuraEnabled
    public static Map<String, String> deployFlow(String objectName, String fieldName, String templateUrl, String sharingLevel) {

        String safeObjectName = objectName.replaceAll('_+', '_');

        ToolingService.Flow flow = FlowCreator.createOrGetObjectProcess(safeObjectName + '_Create_Quip_Account_Plan', 'Quip - ' + objectName + ' - Create Account Plan', objectName, true);
        flow = FlowCreator.addCreateAccountPlanToProcess(flow, objectName, fieldName, templateUrl, sharingLevel);
        String flowId = FlowCreator.saveFlow(flow, true);

        Map<String, String> outputMap = new Map<String, String>();
        outputMap.put('flow', flowId);

        return outputMap;
    }

    @AuraEnabled
    public static Boolean checkIfPageExists(String pageId, Boolean pageCopy) {
        if (pageId == '') {
            return false;
        }

        Map<String, Object> queryResult = Utils.toolingQuery('SELECT FullName FROM FlexiPage WHERE Id = \'' + pageId + '\'');
        Integer results = (Integer) queryResult.get('size');
        if (results == 0) {
            return false;
        }
        
        if (pageCopy) {
            List<Object> records = (List<Object>) queryResult.get('records');
            Map<String, Object> recordMap = (Map<String, Object>) records[0];
            String pageName = (String) recordMap.get('FullName');
            String lookupPageName = pageName + '_Quip_AccountPlan';
            return Utils.checkIfPageExists(lookupPageName);
        } else {
            return true;
        }
    }

    @AuraEnabled
    public static Boolean checkTabPositioningOnPage(String pageId, Boolean pageCopy, String tabName) {
        if (pageId == '') {
            return false;
        }

        String pId = pageId;

        Map<String, Object> queryResult = Utils.toolingQuery('SELECT FullName FROM FlexiPage WHERE Id = \'' + pageId + '\'');
        if (!queryResult.containsKey('size')) {
            queryResult.put('size', 0);
        }
        Integer results = (Integer) queryResult.get('size');
        if (results == 0) {
            return true;
        }
        
        if (pageCopy) {
            List<Object> records = (List<Object>) queryResult.get('records');
            Map<String, Object> recordMap = (Map<String, Object>) records[0];
            String pageName = (String) recordMap.get('FullName');
            String lookupPageName = pageName + '_Quip_AccountPlan';
            
            Map<String, Object> newQueryResult = Utils.toolingQuery('SELECT Id FROM FlexiPage WHERE DeveloperName = \'' + lookupPageName + '\'');
            Integer newResults = (Integer) newQueryResult.get('size');
            if (newResults > 0) {   
                List<Object> newRecords = (List<Object>) newQueryResult.get('records');
                Map<String, Object> newRecordMap = (Map<String, Object>) newRecords[0];
                String copyId = (String) newRecordMap.get('Id');
                pId = copyId;
            }
        }

        if (tabName == 'Apex__Test') {
            return true;
        }
        return Utils.checkTabPositioningOnPage(pId, tabName);
    }

    @AuraEnabled
    public static Map<String, Object> getLastRun() {
        try {
            Account_Plan_Run__c pastRun = [SELECT Object__c, Field__c, Create_Option__c, Copy_Page__c, Page_ID__c, Run_Time__c, Starter_Template__c, Tab_Name__c, Template__c FROM Account_Plan_Run__c ORDER BY Run_Time__c DESC LIMIT 1];
            Map<String, Object> response = new Map<String, Object>();
            response.put('objectName', pastRun.Object__c);
            response.put('fieldName', pastRun.Field__c);
            response.put('createOption', pastRun.Create_Option__c);
            response.put('copyPage', pastRun.Copy_Page__c);
            response.put('pageId', pastRun.Page_ID__c);
            response.put('timestamp', pastRun.Run_Time__c);
            response.put('starterTemplate', pastRun.Starter_Template__c);
            response.put('tabName', pastRun.Tab_Name__c);
            response.put('templateUrl', pastRun.Template__c);
            return response;
        } catch (Exception e) {
            return null;
        }
    }

    @AuraEnabled
    public static void storeRun(String objectName, String fieldName, String createOption, Boolean copyPage, String pageId, Integer timestamp, Boolean starterTemplate, String tabName, String templateUrl) {
        Account_Plan_Run__c newRun = new Account_Plan_Run__c();
        newRun.Name = String.valueOf(timestamp);
        newRun.Object__c = objectName;
        newRun.Field__c = fieldName;
        newRun.Create_Option__c = createOption;
        newRun.Copy_Page__c = copyPage;
        newRun.Page_ID__c = pageId;
        newRun.Run_Time__c = timestamp;
        newRun.Starter_Template__c = starterTemplate;
        newRun.Tab_Name__c = tabName;
        newRun.Template__c = templateUrl;

        insert newRun;
    }
    
}