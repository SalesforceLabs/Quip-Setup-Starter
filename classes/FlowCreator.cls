public with sharing class FlowCreator {
    public static ToolingService.Flow createOrGetObjectProcess(String flowName, String flowLabel, String objectName, Boolean onCreate) {
        ToolingService.Flow flow = Utils.getFlowByLabel(flowLabel);

        if (flow == null) {
            flow = new ToolingService.Flow();

            flow.fullName = flowName;
            flow.description = 'Generated by Quip Setup Starter';
            flow.label = flowLabel;
            flow.interviewLabel = flowName + '-1_InterviewLabel';
            flow.processType = 'Workflow';
            flow.status = 'Draft';

            ToolingService.FlowMetadataValue meta1 = new ToolingService.FlowMetadataValue();
            meta1.name = 'TriggerType';
            ToolingService.FlowElementReferenceOrValue meta1value = new ToolingService.FlowElementReferenceOrValue();
            if (onCreate) {
                meta1value.stringValue = 'onCreateOnly';
            } else {
                meta1value.stringValue = 'onAllChanges';
            }
            meta1.value = meta1value;
            ToolingService.FlowMetadataValue meta2 = new ToolingService.FlowMetadataValue();
            meta2.name = 'ObjectType';
            ToolingService.FlowElementReferenceOrValue meta2value = new ToolingService.FlowElementReferenceOrValue();
            meta2value.stringValue = objectName;
            meta2.value = meta2value;
            ToolingService.FlowMetadataValue meta3 = new ToolingService.FlowMetadataValue();
            meta3.name = 'ObjectVariable';
            ToolingService.FlowElementReferenceOrValue meta3value = new ToolingService.FlowElementReferenceOrValue();
            meta3value.elementReference = 'myVariable_current';
            meta3.value = meta3value;
            ToolingService.FlowMetadataValue meta4 = new ToolingService.FlowMetadataValue();
            meta4.name = 'OldObjectVariable';
            ToolingService.FlowElementReferenceOrValue meta4value = new ToolingService.FlowElementReferenceOrValue();
            meta4value.elementReference = 'myVariable_old';
            meta4.value = meta4value;
            flow.processMetadataValues = new ToolingService.FlowMetadataValue[] { meta1, meta2, meta3, meta4 };

            ToolingService.FlowVariable objectInput = new ToolingService.FlowVariable();
            objectInput.name = 'myVariable_current';
            objectInput.dataType = 'SObject';
            objectInput.isCollection = false;
            objectInput.isInput = true;
            objectInput.isOutput = true;
            objectInput.objectType = objectName;

            ToolingService.FlowVariable oldObjectInput = new ToolingService.FlowVariable();
            oldObjectInput.name = 'myVariable_old';
            oldObjectInput.dataType = 'SObject';
            oldObjectInput.isCollection = false;
            oldObjectInput.isInput = true;
            oldObjectInput.isOutput = false;
            oldObjectInput.objectType = objectName;
            flow.variables = new ToolingService.FlowVariable[] { objectInput, oldObjectInput };

            flow = addFormulaToProcess(flow, 'formula_myRule_1', 'Boolean', 'true');
            flow = addDecisionToProcess(flow, new String[] { 'formula_myRule_1' }, new String[] { 'EqualTo' }, new String[] { 'true' }, new String[] { null }, 'myDecision', 'Always', 'myRule_1');

            Utils.createToolingObject('Flow', flow);
        }

        return flow;
    }

    public static ToolingService.Flow addDecisionToProcess(ToolingService.Flow flow, String[] conditionName, String[] conditionOperator, String[] conditionValue, String[] conditionDataType, String actionName, String actionLabel, String ruleName) {
        ToolingService.FlowDecision decision = new ToolingService.FlowDecision();

        String safeActionName = actionName.replaceAll('_+', '_');

        decision.name = safeActionName;
        decision.label = actionLabel;
        decision.locationY = 0;
        decision.defaultConnectorLabel = 'default';

        ToolingService.FlowRule rule = new ToolingService.FlowRule();
        if (ruleName != null) {
            String safeRuleName = ruleName.replaceAll('_+', '_');
            rule.name = safeRuleName;
        } else {
            rule.name = 'myRule_1';
        }
        String safeRuleLabel = actionLabel.replaceAll('_+', '_');
        rule.label = safeRuleLabel;
        rule.conditionLogic = 'and';

        ToolingService.FlowCondition[] conditions = new ToolingService.FlowCondition[]{};

        for (integer i = 0; i < conditionName.size(); i++) {
            ToolingService.FlowCondition condition = new ToolingService.FlowCondition();
            condition.leftValueReference = conditionName[i];
            condition.operator = conditionOperator[i];

            ToolingService.FlowElementReferenceOrValue rightValueReference = new ToolingService.FlowElementReferenceOrValue();
            if (conditionValue[i].startsWith('myVariable')) {
                rightValueReference.elementReference = conditionValue[i];
            } else if (conditionValue[i] == 'true') {
                rightValueReference.booleanValue = true;
            } else if (conditionValue[i] == 'false') {
                rightValueReference.booleanValue = false;
            } else if (conditionValue[i].isNumeric()) {
                rightValueReference.numberValue = Double.valueOf(conditionValue[i]);
            } else {
                try {
                    Decimal decimalValue = Decimal.valueOf(conditionValue[i]);
                    rightValueReference.numberValue = decimalValue;
                } catch (Exception e) {
                    try {
                        Date dateValue = Date.valueOf(conditionValue[i]);
                        rightValueReference.dateValue = dateValue;
                    } catch (Exception e2) {
                        rightValueReference.stringValue = conditionValue[i];
                    }
                }
            }

            if (conditionDataType[i] != null) {
                ToolingService.FlowMetadataValue meta1 = new ToolingService.FlowMetadataValue();
                meta1.name = 'inputDataType';
                ToolingService.FlowElementReferenceOrValue meta1value = new ToolingService.FlowElementReferenceOrValue();
                if (condition.operator == 'IsNull' || conditionName[i].startsWith('isChanged')) {
                    meta1value.stringValue = 'Boolean';
                } else {
                    meta1value.stringValue = conditionDataType[i];
                }
                meta1.value = meta1value;
                ToolingService.FlowMetadataValue meta2 = new ToolingService.FlowMetadataValue();
                meta2.name = 'leftHandSideType';
                ToolingService.FlowElementReferenceOrValue meta2value = new ToolingService.FlowElementReferenceOrValue();
                meta2value.stringValue = conditionDataType[i];
                meta2.value = meta2value;
                ToolingService.FlowMetadataValue meta3 = new ToolingService.FlowMetadataValue();
                meta3.name = 'operatorDataType';
                ToolingService.FlowElementReferenceOrValue meta3value = new ToolingService.FlowElementReferenceOrValue();
                meta3value.stringValue = conditionDataType[i];
                meta3.value = meta3value;
                ToolingService.FlowMetadataValue meta4 = new ToolingService.FlowMetadataValue();
                meta4.name = 'rightHandSideType';
                ToolingService.FlowElementReferenceOrValue meta4value = new ToolingService.FlowElementReferenceOrValue();
                if (condition.operator == 'IsNull' || conditionName[i].startsWith('isChanged')) {
                    meta4value.stringValue = 'Boolean';
                } else {
                    meta4value.stringValue = conditionDataType[i];
                }
                meta4.value = meta4value;
    
                condition.processMetadataValues = new ToolingService.FlowMetadataValue[] { meta1, meta2, meta3, meta4 };
            }

            condition.rightValue = rightValueReference;
            conditions.add(condition);
        }

        rule.conditions = conditions;

        decision.rules = new ToolingService.FlowRule[]{ rule };

        if (flow.startElementReference == null) {
            flow.startElementReference = decision.name;
            decision.locationX = 50;
        } else {
            ToolingService.FlowNode node = getLastNode(flow, false);
            if (node instanceof ToolingService.FlowRecordLookup) {
                ToolingService.FlowRecordLookup lastNode = (ToolingService.FlowRecordLookup) node;
                ToolingService.FlowConnector connector = new ToolingService.FlowConnector();
                connector.targetReference = decision.name;
                lastNode.connector = connector;
                decision.locationX = lastNode.locationX + 170;
            } else if (node instanceof ToolingService.FlowStart) {
                ToolingService.FlowStart lastNode = (ToolingService.FlowStart) node;
                ToolingService.FlowConnector connector = new ToolingService.FlowConnector();
                connector.targetReference = decision.name;
                lastNode.connector = connector;
                decision.locationX = lastNode.locationX + 170;
            } else if (node instanceof ToolingService.FlowDecision) {
                ToolingService.FlowDecision lastNode = (ToolingService.FlowDecision) node;
                ToolingService.FlowConnector connector = new ToolingService.FlowConnector();
                connector.targetReference = decision.name;
                lastNode.rules[0].connector = connector;
                decision.locationX = lastNode.locationX + 170;
            }
        }


        if (flow.decisions != null) {
            flow.decisions.add(decision);
        } else {
            flow.decisions = new ToolingService.FlowDecision[] { decision };
        }

        return flow;
    }

    public static ToolingService.Flow addFormulaToProcess(ToolingService.Flow flow, String formulaName, String dataType, String expression) {
        ToolingService.FlowFormula formula = new ToolingService.FlowFormula();
        formula.name = formulaName;
        formula.dataType = dataType;
        formula.expression = expression;

        if (flow.formulas != null) {
            flow.formulas.add(formula);
        } else {
            flow.formulas = new ToolingService.FlowFormula[] { formula };
        }

        return flow;
    }

    public static ToolingService.Flow createOrGetObjectFlow(String flowName, String flowLabel, String objectName, Boolean includeOldRecord) {
        ToolingService.Flow flow = Utils.getFlowByLabel(flowLabel);

        if (flow == null) {
            flow = new ToolingService.Flow();

            flow.fullName = flowName;
            flow.description = 'Generated by Quip Setup Starter';
            flow.label = flowLabel;
            flow.interviewLabel = flowLabel + ' {!$Flow.CurrentDateTime}';
            flow.processType = 'AutoLaunchedFlow';
            flow.status = 'Draft';

            ToolingService.FlowMetadataValue meta1 = new ToolingService.FlowMetadataValue();
            meta1.name = 'BuilderType';
            ToolingService.FlowElementReferenceOrValue meta1value = new ToolingService.FlowElementReferenceOrValue();
            meta1value.stringValue = 'LightningFlowBuilder';
            meta1.value = meta1value;
            ToolingService.FlowMetadataValue meta2 = new ToolingService.FlowMetadataValue();
            meta2.name = 'OriginBuilderType';
            ToolingService.FlowElementReferenceOrValue meta2value = new ToolingService.FlowElementReferenceOrValue();
            meta2value.stringValue = 'LightningFlowBuilder';
            meta2.value = meta2value;
            flow.processMetadataValues = new ToolingService.FlowMetadataValue[] { meta1, meta2 };

            ToolingService.FlowStart start = new ToolingService.FlowStart();
            start.locationX = 50;
            start.locationY = 50;

            flow.start = start;

            ToolingService.FlowVariable objectInput = new ToolingService.FlowVariable();
            objectInput.name = 'Current_Record';
            objectInput.dataType = 'SObject';
            objectInput.isCollection = false;
            objectInput.isInput = true;
            objectInput.isOutput = false;
            objectInput.objectType = objectName;

            if (includeOldRecord) {
                ToolingService.FlowVariable oldObjectInput = new ToolingService.FlowVariable();
                oldObjectInput.name = 'Old_Record';
                oldObjectInput.dataType = 'SObject';
                oldObjectInput.isCollection = false;
                oldObjectInput.isInput = true;
                oldObjectInput.isOutput = false;
                oldObjectInput.objectType = objectName;
                flow.variables = new ToolingService.FlowVariable[] { objectInput, oldObjectInput };
            } else {
                flow.variables = new ToolingService.FlowVariable[] { objectInput };
            }

            Utils.createToolingObject('Flow', flow);
        }

        return flow;
    }

    public static ToolingService.FlowNode getLastNode(ToolingService.Flow flow, Boolean y) {
        ToolingService.FlowNode lastNode = null;
        Integer highestCoordinate = 0;

        
        if (!y) {
            if (flow.start != null && flow.start.locationX > highestCoordinate) {
                lastNode = flow.start;
                highestCoordinate = flow.start.locationX;
            }
    
            if (flow.actionCalls != null) {
                for (ToolingService.FlowActionCall node : flow.actionCalls) {
                    if (node.locationX > highestCoordinate) {
                        lastNode = node;
                        highestCoordinate = node.locationX;
                    }
                }
            }
    
            if (flow.assignments != null) {
                for (ToolingService.FlowAssignment node : flow.assignments) {
                    if (node.locationX > highestCoordinate) {
                        lastNode = node;
                        highestCoordinate = node.locationX;
                    }
                }
            }
    
            if (flow.decisions != null) {
                for (ToolingService.FlowDecision node : flow.decisions) {
                    if (node.locationX > highestCoordinate) {
                        lastNode = node;
                        highestCoordinate = node.locationX;
                    }
                }
            }
    
            if (flow.recordLookups != null) {
                for (ToolingService.FlowRecordLookup node : flow.recordLookups) {
                    if (node.locationX > highestCoordinate) {
                        lastNode = node;
                        highestCoordinate = node.locationX;
                    }
                }
            }
    
            if (flow.recordUpdates != null) {
                for (ToolingService.FlowRecordUpdate node : flow.recordUpdates) {
                    if (node.locationX > highestCoordinate) {
                        lastNode = node;
                        highestCoordinate = node.locationX;
                    }
                }
            }
        } else {
            if (flow.start != null && flow.start.locationY > highestCoordinate) {
                lastNode = flow.start;
                highestCoordinate = flow.start.locationY;
            }
    
            if (flow.actionCalls != null) {
                for (ToolingService.FlowActionCall node : flow.actionCalls) {
                    if (node.locationY > highestCoordinate) {
                        lastNode = node;
                        highestCoordinate = node.locationY;
                    }
                }
            }
    
            if (flow.assignments != null) {
                for (ToolingService.FlowAssignment node : flow.assignments) {
                    if (node.locationY > highestCoordinate) {
                        lastNode = node;
                        highestCoordinate = node.locationY;
                    }
                }
            }
    
            if (flow.decisions != null) {
                for (ToolingService.FlowDecision node : flow.decisions) {
                    if (node.locationY > highestCoordinate) {
                        lastNode = node;
                        highestCoordinate = node.locationY;
                    }
                }
            }
    
            if (flow.recordLookups != null) {
                for (ToolingService.FlowRecordLookup node : flow.recordLookups) {
                    if (node.locationY > highestCoordinate) {
                        lastNode = node;
                        highestCoordinate = node.locationY;
                    }
                }
            }
    
            if (flow.recordUpdates != null) {
                for (ToolingService.FlowRecordUpdate node : flow.recordUpdates) {
                    if (node.locationY > highestCoordinate) {
                        lastNode = node;
                        highestCoordinate = node.locationY;
                    }
                }
            }

        }


        return lastNode;
    }

    private static ToolingService.Flow addCopyDocumentActionToProcess(ToolingService.Flow flow, String objectName, String fieldName, String templateUrl, String sharingLevel, String actionName, String actionLabel) {
        // Check if it has it already
        if (flow.actionCalls != null) {
            for (ToolingService.FlowActionCall action : flow.actionCalls) {
                if (action.name == actionName) {
                    return flow;
                }
            }
        }

        ToolingService.FlowActionCall quipAction = new ToolingService.FlowActionCall();
        quipAction.name = actionName;
        quipAction.label = actionLabel;
        quipAction.locationY = 50;
        quipAction.actionName = 'copyQuipDocument';
        quipAction.actionType = 'copyQuipDocument';

        ToolingService.FlowMetadataValue meta1 = new ToolingService.FlowMetadataValue();
        meta1.name = 'quipActionType';
        ToolingService.FlowElementReferenceOrValue meta1value = new ToolingService.FlowElementReferenceOrValue();
        meta1value.stringValue = 'copyDocument';
        meta1.value = meta1value;
        quipAction.processMetadataValues = new ToolingService.FlowMetadataValue[] { meta1 };

        ToolingService.FlowActionCallInputParameter sourceDocUrl = new ToolingService.FlowActionCallInputParameter();
        sourceDocUrl.name = 'sourceDocumentUrl';
        ToolingService.FlowElementReferenceOrValue urlRef = new ToolingService.FlowElementReferenceOrValue();
        urlRef.stringValue = templateUrl;
        sourceDocUrl.value = urlRef;
        ToolingService.FlowMetadataValue meta2 = new ToolingService.FlowMetadataValue();
        meta2.name = 'dataType';
        ToolingService.FlowElementReferenceOrValue meta2value = new ToolingService.FlowElementReferenceOrValue();
        meta2value.stringValue = 'String';
        meta2.value = meta2value;
        ToolingService.FlowMetadataValue meta3 = new ToolingService.FlowMetadataValue();
        meta3.name = 'isRequired';
        ToolingService.FlowElementReferenceOrValue meta3value = new ToolingService.FlowElementReferenceOrValue();
        meta3value.booleanValue = true;
        meta3.value = meta3value;
        ToolingService.FlowMetadataValue meta4 = new ToolingService.FlowMetadataValue();
        meta4.name = 'leftHandSideLabel';
        ToolingService.FlowElementReferenceOrValue meta4value = new ToolingService.FlowElementReferenceOrValue();
        meta4value.stringValue = 'sourceDocumentUrl';
        meta4.value = meta4value;
        ToolingService.FlowMetadataValue meta5 = new ToolingService.FlowMetadataValue();
        meta5.name = 'maxOccurs';
        ToolingService.FlowElementReferenceOrValue meta5value = new ToolingService.FlowElementReferenceOrValue();
        meta5value.numberValue = 0;
        meta5.value = meta5value;
        ToolingService.FlowMetadataValue meta6 = new ToolingService.FlowMetadataValue();
        meta6.name = 'objectType';
        ToolingService.FlowElementReferenceOrValue meta6value = new ToolingService.FlowElementReferenceOrValue();
        meta6value.stringValue = '';
        meta6.value = meta6value;
        ToolingService.FlowMetadataValue meta7 = new ToolingService.FlowMetadataValue();
        meta7.name = 'rightHandSideType';
        ToolingService.FlowElementReferenceOrValue meta7value = new ToolingService.FlowElementReferenceOrValue();
        meta7value.stringValue = 'String';
        meta7.value = meta7value;
        sourceDocUrl.processMetadataValues = new ToolingService.FlowMetadataValue[] { meta2, meta3, meta4, meta5, meta6, meta7 };
        
        ToolingService.FlowActionCallInputParameter contextRecordId = new ToolingService.FlowActionCallInputParameter();
        contextRecordId.name = 'contextRecordId';
        ToolingService.FlowElementReferenceOrValue contextRecordRef = new ToolingService.FlowElementReferenceOrValue();
        contextRecordRef.elementReference = 'myVariable_current.Id';
        contextRecordId.value = contextRecordRef;
        ToolingService.FlowMetadataValue meta8 = new ToolingService.FlowMetadataValue();
        meta8.name = 'dataType';
        ToolingService.FlowElementReferenceOrValue meta8value = new ToolingService.FlowElementReferenceOrValue();
        meta8value.stringValue = 'String';
        meta8.value = meta8value;
        ToolingService.FlowMetadataValue meta9 = new ToolingService.FlowMetadataValue();
        meta9.name = 'isRequired';
        ToolingService.FlowElementReferenceOrValue meta9value = new ToolingService.FlowElementReferenceOrValue();
        meta9value.booleanValue = false;
        meta9.value = meta9value;
        ToolingService.FlowMetadataValue meta10 = new ToolingService.FlowMetadataValue();
        meta10.name = 'leftHandSideLabel';
        ToolingService.FlowElementReferenceOrValue meta10value = new ToolingService.FlowElementReferenceOrValue();
        meta10value.stringValue = 'contextRecordId';
        meta10.value = meta10value;
        ToolingService.FlowMetadataValue meta11 = new ToolingService.FlowMetadataValue();
        meta11.name = 'maxOccurs';
        ToolingService.FlowElementReferenceOrValue meta11value = new ToolingService.FlowElementReferenceOrValue();
        meta11value.numberValue = 0;
        meta11.value = meta11value;
        ToolingService.FlowMetadataValue meta12 = new ToolingService.FlowMetadataValue();
        meta12.name = 'objectType';
        ToolingService.FlowElementReferenceOrValue meta12value = new ToolingService.FlowElementReferenceOrValue();
        meta12value.stringValue = '';
        meta12.value = meta12value;
        ToolingService.FlowMetadataValue meta13 = new ToolingService.FlowMetadataValue();
        meta13.name = 'rightHandSideType';
        ToolingService.FlowElementReferenceOrValue meta13value = new ToolingService.FlowElementReferenceOrValue();
        meta13value.stringValue = 'Reference';
        meta13.value = meta13value;
        contextRecordId.processMetadataValues = new ToolingService.FlowMetadataValue[] { meta8, meta9, meta10, meta11, meta12, meta13 };

        ToolingService.FlowActionCallInputParameter mailMergeRecordId = new ToolingService.FlowActionCallInputParameter();
        mailMergeRecordId.name = 'mailMergeRecordId';
        ToolingService.FlowElementReferenceOrValue mailMergeRecordRef = new ToolingService.FlowElementReferenceOrValue();
        mailMergeRecordRef.elementReference = 'myVariable_current.Id';
        mailMergeRecordId.value = mailMergeRecordRef;
        ToolingService.FlowMetadataValue meta14 = new ToolingService.FlowMetadataValue();
        meta14.name = 'dataType';
        ToolingService.FlowElementReferenceOrValue meta14value = new ToolingService.FlowElementReferenceOrValue();
        meta14value.stringValue = 'String';
        meta14.value = meta14value;
        ToolingService.FlowMetadataValue meta15 = new ToolingService.FlowMetadataValue();
        meta15.name = 'isRequired';
        ToolingService.FlowElementReferenceOrValue meta15value = new ToolingService.FlowElementReferenceOrValue();
        meta15value.booleanValue = false;
        meta15.value = meta15value;
        ToolingService.FlowMetadataValue meta16 = new ToolingService.FlowMetadataValue();
        meta16.name = 'leftHandSideLabel';
        ToolingService.FlowElementReferenceOrValue meta16value = new ToolingService.FlowElementReferenceOrValue();
        meta16value.stringValue = 'mailMergeRecordId';
        meta16.value = meta16value;
        ToolingService.FlowMetadataValue meta17 = new ToolingService.FlowMetadataValue();
        meta17.name = 'maxOccurs';
        ToolingService.FlowElementReferenceOrValue meta17value = new ToolingService.FlowElementReferenceOrValue();
        meta17value.numberValue = 0;
        meta17.value = meta17value;
        ToolingService.FlowMetadataValue meta18 = new ToolingService.FlowMetadataValue();
        meta18.name = 'objectType';
        ToolingService.FlowElementReferenceOrValue meta18value = new ToolingService.FlowElementReferenceOrValue();
        meta18value.stringValue = '';
        meta18.value = meta18value;
        ToolingService.FlowMetadataValue meta19 = new ToolingService.FlowMetadataValue();
        meta19.name = 'rightHandSideType';
        ToolingService.FlowElementReferenceOrValue meta19value = new ToolingService.FlowElementReferenceOrValue();
        meta19value.stringValue = 'Reference';
        meta19.value = meta19value;
        mailMergeRecordId.processMetadataValues = new ToolingService.FlowMetadataValue[] { meta14, meta15, meta16, meta17, meta18, meta19 };

        ToolingService.FlowActionCallInputParameter targetRecordUrlField = new ToolingService.FlowActionCallInputParameter();
        targetRecordUrlField.name = 'targetRecordUrlField';
        ToolingService.FlowElementReferenceOrValue targetRecordUrlRef = new ToolingService.FlowElementReferenceOrValue();
        targetRecordUrlRef.stringValue = fieldName;
        targetRecordUrlField.value = targetRecordUrlRef;
        ToolingService.FlowMetadataValue meta20 = new ToolingService.FlowMetadataValue();
        meta20.name = 'dataType';
        ToolingService.FlowElementReferenceOrValue meta20value = new ToolingService.FlowElementReferenceOrValue();
        meta20value.stringValue = 'String';
        meta20.value = meta20value;
        ToolingService.FlowMetadataValue meta21 = new ToolingService.FlowMetadataValue();
        meta21.name = 'isRequired';
        ToolingService.FlowElementReferenceOrValue meta21value = new ToolingService.FlowElementReferenceOrValue();
        meta21value.booleanValue = false;
        meta21.value = meta21value;
        ToolingService.FlowMetadataValue meta22 = new ToolingService.FlowMetadataValue();
        meta22.name = 'leftHandSideLabel';
        ToolingService.FlowElementReferenceOrValue meta22value = new ToolingService.FlowElementReferenceOrValue();
        meta22value.stringValue = 'targetRecordUrlField';
        meta22.value = meta22value;
        ToolingService.FlowMetadataValue meta23 = new ToolingService.FlowMetadataValue();
        meta23.name = 'maxOccurs';
        ToolingService.FlowElementReferenceOrValue meta23value = new ToolingService.FlowElementReferenceOrValue();
        meta23value.numberValue = 0;
        meta23.value = meta23value;
        ToolingService.FlowMetadataValue meta24 = new ToolingService.FlowMetadataValue();
        meta24.name = 'objectType';
        ToolingService.FlowElementReferenceOrValue meta24value = new ToolingService.FlowElementReferenceOrValue();
        meta24value.stringValue = '';
        meta24.value = meta24value;
        ToolingService.FlowMetadataValue meta25 = new ToolingService.FlowMetadataValue();
        meta25.name = 'rightHandSideType';
        ToolingService.FlowElementReferenceOrValue meta25value = new ToolingService.FlowElementReferenceOrValue();
        meta25value.stringValue = 'String';
        meta25.value = meta25value;
        targetRecordUrlField.processMetadataValues = new ToolingService.FlowMetadataValue[] { meta20, meta21, meta22, meta23, meta24, meta25 };

        ToolingService.FlowActionCallInputParameter companyLinkAccess = new ToolingService.FlowActionCallInputParameter();
        companyLinkAccess.name = 'companyLinkAccess';
        ToolingService.FlowElementReferenceOrValue companyLinkAccessRef = new ToolingService.FlowElementReferenceOrValue();
        companyLinkAccessRef.stringValue = sharingLevel;
        companyLinkAccess.value = companyLinkAccessRef;
        ToolingService.FlowMetadataValue meta26 = new ToolingService.FlowMetadataValue();
        meta26.name = 'dataType';
        ToolingService.FlowElementReferenceOrValue meta26value = new ToolingService.FlowElementReferenceOrValue();
        meta26value.stringValue = 'String';
        meta26.value = meta26value;
        ToolingService.FlowMetadataValue meta27 = new ToolingService.FlowMetadataValue();
        meta27.name = 'isRequired';
        ToolingService.FlowElementReferenceOrValue meta27value = new ToolingService.FlowElementReferenceOrValue();
        meta27value.booleanValue = false;
        meta27.value = meta27value;
        ToolingService.FlowMetadataValue meta28 = new ToolingService.FlowMetadataValue();
        meta28.name = 'leftHandSideLabel';
        ToolingService.FlowElementReferenceOrValue meta28value = new ToolingService.FlowElementReferenceOrValue();
        meta28value.stringValue = 'companyLinkAccess';
        meta28.value = meta28value;
        ToolingService.FlowMetadataValue meta29 = new ToolingService.FlowMetadataValue();
        meta29.name = 'maxOccurs';
        ToolingService.FlowElementReferenceOrValue meta29value = new ToolingService.FlowElementReferenceOrValue();
        meta29value.numberValue = 0;
        meta29.value = meta29value;
        ToolingService.FlowMetadataValue meta30 = new ToolingService.FlowMetadataValue();
        meta30.name = 'objectType';
        ToolingService.FlowElementReferenceOrValue meta30value = new ToolingService.FlowElementReferenceOrValue();
        meta30value.stringValue = '';
        meta30.value = meta30value;
        ToolingService.FlowMetadataValue meta31 = new ToolingService.FlowMetadataValue();
        meta31.name = 'rightHandSideType';
        ToolingService.FlowElementReferenceOrValue meta31value = new ToolingService.FlowElementReferenceOrValue();
        meta31value.stringValue = 'String';
        meta31.value = meta31value;
        companyLinkAccess.processMetadataValues = new ToolingService.FlowMetadataValue[] { meta26, meta27, meta28, meta29, meta30, meta31 };

        quipAction.inputParameters = new ToolingService.FlowActionCallInputParameter[] { sourceDocUrl, contextRecordId, mailMergeRecordId, targetRecordUrlField, companyLinkAccess };

        ToolingService.FlowNode node = getLastNode(flow, false);
        if (node instanceof ToolingService.FlowRecordLookup) {
            ToolingService.FlowRecordLookup lastNode = (ToolingService.FlowRecordLookup) node;
            ToolingService.FlowConnector connector = new ToolingService.FlowConnector();
            connector.targetReference = quipAction.name;
            lastNode.connector = connector;
            quipAction.locationX = lastNode.locationX + 170;
        } else if (node instanceof ToolingService.FlowStart) {
            ToolingService.FlowStart lastNode = (ToolingService.FlowStart) node;
            ToolingService.FlowConnector connector = new ToolingService.FlowConnector();
            connector.targetReference = quipAction.name;
            lastNode.connector = connector;
            quipAction.locationX = lastNode.locationX + 170;
        } else if (node instanceof ToolingService.FlowDecision) {
            ToolingService.FlowDecision lastNode = (ToolingService.FlowDecision) node;
            ToolingService.FlowConnector connector = new ToolingService.FlowConnector();
            connector.targetReference = quipAction.name;
            lastNode.rules[0].connector = connector;
            quipAction.locationX = lastNode.locationX + 170;
        }

        // Add Attach Document to Record action

        ToolingService.FlowActionCall attachAction = new ToolingService.FlowActionCall();
        attachAction.name = 'myRule_1_A2';
        attachAction.label = 'Attach to Record';
        attachAction.locationY = 50;
        attachAction.actionName = 'attachQuipDocumentToRecord';
        attachAction.actionType = 'attachQuipDocumentToRecord';

        ToolingService.FlowMetadataValue meta32 = new ToolingService.FlowMetadataValue();
        meta32.name = 'quipActionType';
        ToolingService.FlowElementReferenceOrValue meta32value = new ToolingService.FlowElementReferenceOrValue();
        meta32value.stringValue = 'attachDocumentToRecord';
        meta32.value = meta32value;
        attachAction.processMetadataValues = new ToolingService.FlowMetadataValue[] { meta32 };

        ToolingService.FlowActionCallInputParameter targetRecord = new ToolingService.FlowActionCallInputParameter();
        targetRecord.name = 'recordId';
        ToolingService.FlowElementReferenceOrValue recordRef = new ToolingService.FlowElementReferenceOrValue();
        recordRef.elementReference = 'myVariable_current.Id';
        targetRecord.value = recordRef;

        ToolingService.FlowMetadataValue meta33 = new ToolingService.FlowMetadataValue();
        meta33.name = 'dataType';
        ToolingService.FlowElementReferenceOrValue meta33value = new ToolingService.FlowElementReferenceOrValue();
        meta33value.stringValue = 'String';
        meta33.value = meta33value;

        ToolingService.FlowMetadataValue meta34 = new ToolingService.FlowMetadataValue();
        meta34.name = 'isRequired';
        ToolingService.FlowElementReferenceOrValue meta34value = new ToolingService.FlowElementReferenceOrValue();
        meta34value.booleanValue = false;
        meta34.value = meta34value;

        ToolingService.FlowMetadataValue meta35 = new ToolingService.FlowMetadataValue();
        meta35.name = 'leftHandSideLabel';
        ToolingService.FlowElementReferenceOrValue meta35value = new ToolingService.FlowElementReferenceOrValue();
        meta35value.stringValue = 'recordId';
        meta35.value = meta35value;
        
        ToolingService.FlowMetadataValue meta36 = new ToolingService.FlowMetadataValue();
        meta36.name = 'maxOccurs';
        ToolingService.FlowElementReferenceOrValue meta36value = new ToolingService.FlowElementReferenceOrValue();
        meta36value.numberValue = 0;
        meta36.value = meta36value;

        ToolingService.FlowMetadataValue meta37 = new ToolingService.FlowMetadataValue();
        meta37.name = 'objectType';
        ToolingService.FlowElementReferenceOrValue meta37value = new ToolingService.FlowElementReferenceOrValue();
        meta37value.stringValue = '';
        meta37.value = meta37value;

        ToolingService.FlowMetadataValue meta38 = new ToolingService.FlowMetadataValue();
        meta38.name = 'rightHandSideType';
        ToolingService.FlowElementReferenceOrValue meta38value = new ToolingService.FlowElementReferenceOrValue();
        meta38value.stringValue = 'Reference';
        meta38.value = meta38value;

        targetRecord.processMetadataValues = new ToolingService.FlowMetadataValue[] { meta33, meta34, meta35, meta36, meta37, meta38 };

        ToolingService.FlowActionCallInputParameter targetDocumentUrl = new ToolingService.FlowActionCallInputParameter();
        targetDocumentUrl.name = 'documentUrl';
        ToolingService.FlowElementReferenceOrValue targetDocUrlRef = new ToolingService.FlowElementReferenceOrValue();
        targetDocUrlRef.elementReference = 'myVariable_current.' + fieldName;
        targetDocumentUrl.value = targetDocUrlRef;

        ToolingService.FlowMetadataValue meta39 = new ToolingService.FlowMetadataValue();
        meta39.name = 'dataType';
        ToolingService.FlowElementReferenceOrValue meta39value = new ToolingService.FlowElementReferenceOrValue();
        meta39value.stringValue = 'String';
        meta39.value = meta39value;

        ToolingService.FlowMetadataValue meta40 = new ToolingService.FlowMetadataValue();
        meta40.name = 'isRequired';
        ToolingService.FlowElementReferenceOrValue meta40value = new ToolingService.FlowElementReferenceOrValue();
        meta40value.booleanValue = true;
        meta40.value = meta40value;

        ToolingService.FlowMetadataValue meta41 = new ToolingService.FlowMetadataValue();
        meta41.name = 'leftHandSideLabel';
        ToolingService.FlowElementReferenceOrValue meta41value = new ToolingService.FlowElementReferenceOrValue();
        meta41value.stringValue = 'documentUrl';
        meta41.value = meta41value;
        
        ToolingService.FlowMetadataValue meta42 = new ToolingService.FlowMetadataValue();
        meta42.name = 'maxOccurs';
        ToolingService.FlowElementReferenceOrValue meta42value = new ToolingService.FlowElementReferenceOrValue();
        meta42value.numberValue = 0;
        meta42.value = meta42value;

        ToolingService.FlowMetadataValue meta43 = new ToolingService.FlowMetadataValue();
        meta43.name = 'objectType';
        ToolingService.FlowElementReferenceOrValue meta43value = new ToolingService.FlowElementReferenceOrValue();
        meta43value.stringValue = '';
        meta43.value = meta43value;

        ToolingService.FlowMetadataValue meta44 = new ToolingService.FlowMetadataValue();
        meta44.name = 'rightHandSideType';
        ToolingService.FlowElementReferenceOrValue meta44value = new ToolingService.FlowElementReferenceOrValue();
        meta44value.stringValue = 'Reference';
        meta44.value = meta44value;

        targetDocumentUrl.processMetadataValues = new ToolingService.FlowMetadataValue[] { meta39, meta40, meta41, meta42, meta43, meta44 };

        // Link the two together
        ToolingService.FlowConnector connectorTwo = new ToolingService.FlowConnector();
        connectorTwo.targetReference = attachAction.name;
        quipAction.connector = connectorTwo;
        attachAction.locationX = quipAction.locationX + 170;

        attachAction.inputParameters = new ToolingService.FlowActionCallInputParameter[] { targetRecord, targetDocumentUrl };

        if (flow.actionCalls != null) {
            flow.actionCalls.add(quipAction);
            flow.actionCalls.add(attachAction);
        } else {
            flow.actionCalls = new ToolingService.FlowActionCall[] { quipAction, attachAction };
        }

        return flow;
    }

    public static ToolingService.Flow addLaunchFlowActionToProcess(ToolingService.Flow flow, String flowName, String flowLabel, String objectName, String actionName, String actionLabel) {
        // Check if it has it already
        if (flow.actionCalls != null) {
            for (ToolingService.FlowActionCall action : flow.actionCalls) {
                if (action.name == actionName) {
                    return flow;
                }
            }
        }

        ToolingService.FlowActionCall action = new ToolingService.FlowActionCall();
        action.name = actionName;
        action.label = actionLabel;
        action.locationY = 50;
        action.actionName = flowName;
        action.actionType = 'flow';

        ToolingService.FlowMetadataValue meta1 = new ToolingService.FlowMetadataValue();
        meta1.name = 'ActionCallType';
        ToolingService.FlowElementReferenceOrValue meta1value = new ToolingService.FlowElementReferenceOrValue();
        meta1value.stringValue = 'flow';
        meta1.value = meta1value;
        ToolingService.FlowMetadataValue meta2 = new ToolingService.FlowMetadataValue();
        meta2.name = 'flowSelection';
        ToolingService.FlowElementReferenceOrValue meta2value = new ToolingService.FlowElementReferenceOrValue();
        meta2value.stringValue = flowLabel;
        meta2.value = meta2value;
        action.processMetadataValues = new ToolingService.FlowMetadataValue[] { meta1, meta2 };


        ToolingService.FlowActionCallInputParameter inputRecord = new ToolingService.FlowActionCallInputParameter();
        inputRecord.name = 'Current_Record';
        ToolingService.FlowElementReferenceOrValue recordRef = new ToolingService.FlowElementReferenceOrValue();
        recordRef.elementReference = 'myVariable_current';
        inputRecord.value = recordRef;
        ToolingService.FlowMetadataValue meta3 = new ToolingService.FlowMetadataValue();
        meta3.name = 'isRequired';
        ToolingService.FlowElementReferenceOrValue meta3value = new ToolingService.FlowElementReferenceOrValue();
        meta3value.booleanValue = false;
        meta3.value = meta3value;
        ToolingService.FlowMetadataValue meta4 = new ToolingService.FlowMetadataValue();
        meta4.name = 'leftHandSideLabel';
        ToolingService.FlowElementReferenceOrValue meta4value = new ToolingService.FlowElementReferenceOrValue();
        meta4value.stringValue = 'Current_Record';
        meta4.value = meta4value;
        ToolingService.FlowMetadataValue meta5 = new ToolingService.FlowMetadataValue();
        meta5.name = 'maxOccurs';
        ToolingService.FlowElementReferenceOrValue meta5value = new ToolingService.FlowElementReferenceOrValue();
        meta5value.numberValue = 1;
        meta5.value = meta5value;
        ToolingService.FlowMetadataValue meta6 = new ToolingService.FlowMetadataValue();
        meta6.name = 'objectType';
        ToolingService.FlowElementReferenceOrValue meta6value = new ToolingService.FlowElementReferenceOrValue();
        meta6value.stringValue = objectName;
        meta6.value = meta6value;
        ToolingService.FlowMetadataValue meta7 = new ToolingService.FlowMetadataValue();
        meta7.name = 'rightHandSideType';
        ToolingService.FlowElementReferenceOrValue meta7value = new ToolingService.FlowElementReferenceOrValue();
        meta7value.stringValue = 'SObject';
        meta7.value = meta7value;
        ToolingService.FlowMetadataValue meta8 = new ToolingService.FlowMetadataValue();
        meta8.name = 'dataType';
        ToolingService.FlowElementReferenceOrValue meta8value = new ToolingService.FlowElementReferenceOrValue();
        meta8value.stringValue = 'SObject';
        meta8.value = meta8value;
        inputRecord.processMetadataValues = new ToolingService.FlowMetadataValue[] { meta3, meta4, meta5, meta6, meta7, meta8 };

        action.inputParameters = new ToolingService.FlowActionCallInputParameter[] { inputRecord };

        ToolingService.FlowNode node = getLastNode(flow, false);
        if (node instanceof ToolingService.FlowRecordLookup) {
            ToolingService.FlowRecordLookup lastNode = (ToolingService.FlowRecordLookup) node;
            ToolingService.FlowConnector connector = new ToolingService.FlowConnector();
            connector.targetReference = action.name;
            lastNode.connector = connector;
            action.locationX = lastNode.locationX + 170;
        } else if (node instanceof ToolingService.FlowStart) {
            ToolingService.FlowStart lastNode = (ToolingService.FlowStart) node;
            ToolingService.FlowConnector connector = new ToolingService.FlowConnector();
            connector.targetReference = action.name;
            lastNode.connector = connector;
            action.locationX = lastNode.locationX + 170;
        } else if (node instanceof ToolingService.FlowDecision) {
            ToolingService.FlowDecision lastNode = (ToolingService.FlowDecision) node;
            ToolingService.FlowConnector connector = new ToolingService.FlowConnector();
            connector.targetReference = action.name;
            lastNode.rules[0].connector = connector;
            action.locationX = lastNode.locationX + 170;
        }

        if (flow.actionCalls != null) {
            flow.actionCalls.add(action);
        } else {
            flow.actionCalls = new ToolingService.FlowActionCall[] { action };
        }

        return flow;
    }

    public static ToolingService.Flow addSendMessageInDocumentActionToProcess(ToolingService.Flow flow, String destinationUrl, String message, String actionName, String actionLabel, Boolean staticDestination) {
        // Check if it has it already
        if (flow.actionCalls != null) {
            for (ToolingService.FlowActionCall action : flow.actionCalls) {
                if (action.name == actionName) {
                    return flow;
                }
            }
        }

        ToolingService.FlowActionCall quipAction = new ToolingService.FlowActionCall();
        quipAction.name = 'myRule_1_A1';
        quipAction.label = actionLabel;
        quipAction.locationY = 50;
        quipAction.actionName = 'addMessageToQuipDocument';
        quipAction.actionType = 'addMessageToQuipDocument';

        ToolingService.FlowMetadataValue meta1 = new ToolingService.FlowMetadataValue();
        meta1.name = 'quipActionType';
        ToolingService.FlowElementReferenceOrValue meta1value = new ToolingService.FlowElementReferenceOrValue();
        meta1value.stringValue = 'addMessageToDocument';
        meta1.value = meta1value;

        quipAction.processMetadataValues = new ToolingService.FlowMetadataValue[] { meta1 };

        ToolingService.FlowActionCallInputParameter documentUrl = new ToolingService.FlowActionCallInputParameter();
        documentUrl.name = 'documentUrl';
        ToolingService.FlowElementReferenceOrValue urlRef = new ToolingService.FlowElementReferenceOrValue();
        if (staticDestination) {
            urlRef.stringValue = destinationUrl;
        } else {
            urlRef.elementReference = destinationUrl;
        }
        documentUrl.value = urlRef;

        ToolingService.FlowMetadataValue meta2 = new ToolingService.FlowMetadataValue();
        meta2.name = 'dataType';
        ToolingService.FlowElementReferenceOrValue meta2value = new ToolingService.FlowElementReferenceOrValue();
        meta2value.stringValue = 'String';
        meta2.value = meta2value;

        ToolingService.FlowMetadataValue meta3 = new ToolingService.FlowMetadataValue();
        meta3.name = 'isRequired';
        ToolingService.FlowElementReferenceOrValue meta3value = new ToolingService.FlowElementReferenceOrValue();
        meta3value.booleanValue = true;
        meta3.value = meta3value;

        ToolingService.FlowMetadataValue meta4 = new ToolingService.FlowMetadataValue();
        meta4.name = 'leftHandSideLabel';
        ToolingService.FlowElementReferenceOrValue meta4value = new ToolingService.FlowElementReferenceOrValue();
        meta4value.stringValue = 'documentUrl';
        meta4.value = meta4value;

        ToolingService.FlowMetadataValue meta5 = new ToolingService.FlowMetadataValue();
        meta5.name = 'maxOccurs';
        ToolingService.FlowElementReferenceOrValue meta5value = new ToolingService.FlowElementReferenceOrValue();
        meta5value.numberValue = 0;
        meta5.value = meta5value;

        ToolingService.FlowMetadataValue meta6 = new ToolingService.FlowMetadataValue();
        meta6.name = 'objectType';
        ToolingService.FlowElementReferenceOrValue meta6value = new ToolingService.FlowElementReferenceOrValue();
        meta6value.stringValue = '';
        meta6.value = meta6value;

        ToolingService.FlowMetadataValue meta7 = new ToolingService.FlowMetadataValue();
        meta7.name = 'rightHandSideType';
        ToolingService.FlowElementReferenceOrValue meta7value = new ToolingService.FlowElementReferenceOrValue();
        if (staticDestination) {
            meta7value.stringValue = 'String';
        } else {
            meta7value.stringValue = 'Reference';
        }
        meta7.value = meta7value;

        documentUrl.processMetadataValues = new ToolingService.FlowMetadataValue[] { meta2, meta3, meta4, meta5, meta6, meta7 };

        ToolingService.FlowActionCallInputParameter messageInput = new ToolingService.FlowActionCallInputParameter();
        messageInput.name = 'messageContent';
        ToolingService.FlowFormula messageFormula = new ToolingService.FlowFormula();
        messageFormula.name = 'formula_3_myRule_1_A1';
        messageFormula.dataType = 'String';

        String formattedMessage = message.replaceAll('\\[[A-Za-z0-9\\_]+\\]([\\.\\_A-Za-z0-9:]*)', '{!myVariable_current$1}');

        messageFormula.expression = formattedMessage;

        ToolingService.FlowMetadataValue meta8 = new ToolingService.FlowMetadataValue();
        meta8.name = 'originalFormula';
        ToolingService.FlowElementReferenceOrValue meta8value = new ToolingService.FlowElementReferenceOrValue();
        meta8value.stringValue = message;
        meta8.value = meta8value;
        messageFormula.processMetadataValues = new ToolingService.FlowMetadataValue[] { meta8 };

        ToolingService.FlowElementReferenceOrValue messageRef = new ToolingService.FlowElementReferenceOrValue();
        messageRef.elementReference = messageFormula.name;
        messageInput.value = messageRef;

        ToolingService.FlowMetadataValue meta9 = new ToolingService.FlowMetadataValue();
        meta9.name = 'isRequired';
        ToolingService.FlowElementReferenceOrValue meta9value = new ToolingService.FlowElementReferenceOrValue();
        meta9value.booleanValue = true;
        meta9.value = meta9value;

        ToolingService.FlowMetadataValue meta10 = new ToolingService.FlowMetadataValue();
        meta10.name = 'leftHandSideLabel';
        ToolingService.FlowElementReferenceOrValue meta10value = new ToolingService.FlowElementReferenceOrValue();
        meta10value.stringValue = 'messageContent';
        meta10.value = meta10value;

        ToolingService.FlowMetadataValue meta11 = new ToolingService.FlowMetadataValue();
        meta11.name = 'maxOccurs';
        ToolingService.FlowElementReferenceOrValue meta11value = new ToolingService.FlowElementReferenceOrValue();
        meta11value.numberValue = 0;
        meta11.value = meta11value;

        ToolingService.FlowMetadataValue meta12 = new ToolingService.FlowMetadataValue();
        meta12.name = 'objectType';
        ToolingService.FlowElementReferenceOrValue meta12value = new ToolingService.FlowElementReferenceOrValue();
        meta12value.stringValue = '';
        meta12.value = meta12value;

        ToolingService.FlowMetadataValue meta13 = new ToolingService.FlowMetadataValue();
        meta13.name = 'rightHandSideType';
        ToolingService.FlowElementReferenceOrValue meta13value = new ToolingService.FlowElementReferenceOrValue();
        meta13value.stringValue = 'Formula';
        meta13.value = meta13value;

        ToolingService.FlowMetadataValue meta14 = new ToolingService.FlowMetadataValue();
        meta14.name = 'dataType';
        ToolingService.FlowElementReferenceOrValue meta14value = new ToolingService.FlowElementReferenceOrValue();
        meta14value.stringValue = 'String';
        meta14.value = meta14value;


        messageInput.processMetadataValues = new ToolingService.FlowMetadataValue[] { meta9, meta10, meta11, meta12, meta13, meta14 };
        
        quipAction.inputParameters = new ToolingService.FlowActionCallInputParameter[] { documentUrl, messageInput };

        ToolingService.FlowNode node = getLastNode(flow, false);
        if (node instanceof ToolingService.FlowRecordLookup) {
            ToolingService.FlowRecordLookup lastNode = (ToolingService.FlowRecordLookup) node;
            ToolingService.FlowConnector connector = new ToolingService.FlowConnector();
            connector.targetReference = quipAction.name;
            lastNode.connector = connector;
            quipAction.locationX = lastNode.locationX + 170;
        } else if (node instanceof ToolingService.FlowStart) {
            ToolingService.FlowStart lastNode = (ToolingService.FlowStart) node;
            ToolingService.FlowConnector connector = new ToolingService.FlowConnector();
            connector.targetReference = quipAction.name;
            lastNode.connector = connector;
            quipAction.locationX = lastNode.locationX + 170;
        } else if (node instanceof ToolingService.FlowDecision) {
            ToolingService.FlowDecision lastNode = (ToolingService.FlowDecision) node;
            ToolingService.FlowConnector connector = new ToolingService.FlowConnector();
            connector.targetReference = quipAction.name;
            lastNode.rules[0].connector = connector;
            quipAction.locationX = lastNode.locationX + 170;
        }

        if (flow.actionCalls != null) {
            flow.actionCalls.add(quipAction);
        } else {
            flow.actionCalls = new ToolingService.FlowActionCall[] { quipAction };
        }

        if (flow.formulas != null) {
            flow.formulas.add(messageFormula);
        } else {
            flow.formulas = new ToolingService.FlowFormula[] { messageFormula };
        }

        return flow;
    }

    public static ToolingService.Flow addAddQuipDocumentToFolder(ToolingService.Flow flow, String documentFieldName, String folderId, String actionName, String actionLabel, Boolean staticFolder, Boolean y) {
        // Check if it has it already
        if (flow.actionCalls != null) {
            for (ToolingService.FlowActionCall action : flow.actionCalls) {
                if (action.name == actionName) {
                    return flow;
                }
            }
        }

        ToolingService.FlowActionCall quipAction = new ToolingService.FlowActionCall();
        quipAction.name = actionName;
        quipAction.label = actionLabel;
        quipAction.locationY = 50;
        quipAction.actionName = 'addQuipDocumentToFolder';
        quipAction.actionType = 'addQuipDocumentToFolder';
        quipAction.storeOutputAutomatically = true;

        ToolingService.FlowActionCallInputParameter documentUrl = new ToolingService.FlowActionCallInputParameter();
        documentUrl.name = 'documentUrl';
        ToolingService.FlowElementReferenceOrValue docRef = new ToolingService.FlowElementReferenceOrValue();
        docRef.elementReference = documentFieldName;
        documentUrl.value = docRef;

        ToolingService.FlowActionCallInputParameter folderUrl = new ToolingService.FlowActionCallInputParameter();
        folderUrl.name = 'folderUrl';
        ToolingService.FlowElementReferenceOrValue folderRef = new ToolingService.FlowElementReferenceOrValue();
        if (staticFolder) {
            folderRef.stringValue = folderId;
        } else {
            folderRef.elementReference = folderId;
        }
        folderUrl.value = folderRef;
        
        quipAction.inputParameters = new ToolingService.FlowActionCallInputParameter[] { documentUrl, folderUrl };

        ToolingService.FlowNode node = getLastNode(flow, y);
        if (node instanceof ToolingService.FlowRecordLookup) {
            ToolingService.FlowRecordLookup lastNode = (ToolingService.FlowRecordLookup) node;
            ToolingService.FlowConnector connector = new ToolingService.FlowConnector();
            connector.targetReference = quipAction.name;
            lastNode.connector = connector;
            if (!y) {
                quipAction.locationX = lastNode.locationX + 170;
                quipAction.locationY = lastNode.locationY;
            } else {
                quipAction.locationX = lastNode.locationX;
                quipAction.locationY = lastNode.locationY + 170;
            }
        } else if (node instanceof ToolingService.FlowStart) {
            ToolingService.FlowStart lastNode = (ToolingService.FlowStart) node;
            ToolingService.FlowConnector connector = new ToolingService.FlowConnector();
            connector.targetReference = quipAction.name;
            lastNode.connector = connector;
            if (!y) {
                quipAction.locationX = lastNode.locationX + 170;
                quipAction.locationY = lastNode.locationY;
            } else {
                quipAction.locationX = lastNode.locationX;
                quipAction.locationY = lastNode.locationY + 170;
            }
        } else if (node instanceof ToolingService.FlowDecision) {
            ToolingService.FlowDecision lastNode = (ToolingService.FlowDecision) node;
            ToolingService.FlowConnector connector = new ToolingService.FlowConnector();
            connector.targetReference = quipAction.name;
            lastNode.rules[0].connector = connector;
            if (!y) {
                quipAction.locationX = lastNode.locationX + 170;
                quipAction.locationY = lastNode.locationY;
            } else {
                quipAction.locationX = lastNode.locationX;
                quipAction.locationY = lastNode.locationY + 170;
            }
        } else if (node instanceof ToolingService.FlowRecordUpdate) {
            ToolingService.FlowRecordUpdate lastNode = (ToolingService.FlowRecordUpdate) node;
            ToolingService.FlowConnector connector = new ToolingService.FlowConnector();
            connector.targetReference = quipAction.name;
            lastNode.connector = connector;
            if (!y) {
                quipAction.locationX = lastNode.locationX + 170;
                quipAction.locationY = lastNode.locationY;
            } else {
                quipAction.locationX = lastNode.locationX;
                quipAction.locationY = lastNode.locationY + 170;
            }
        }

        if (flow.actionCalls != null) {
            flow.actionCalls.add(quipAction);
        } else {
            flow.actionCalls = new ToolingService.FlowActionCall[] { quipAction };
        }

        return flow;
    }

    public static ToolingService.Flow addCreateFolderToFlow(ToolingService.Flow flow, String folderName, String parentFolderId, String actionName, String actionLabel, Boolean y) {
        // Check if it has it already
        if (flow.actionCalls != null) {
            for (ToolingService.FlowActionCall action : flow.actionCalls) {
                if (action.name == actionName) {
                    return flow;
                }
            }
        }

        ToolingService.FlowActionCall quipAction = new ToolingService.FlowActionCall();
        quipAction.name = actionName;
        quipAction.label = actionLabel;
        quipAction.locationY = 50;
        quipAction.actionName = 'createQuipFolder';
        quipAction.actionType = 'createQuipFolder';
        quipAction.storeOutputAutomatically = true;

        ToolingService.FlowActionCallInputParameter folderTitle = new ToolingService.FlowActionCallInputParameter();
        folderTitle.name = 'folderTitle';
        ToolingService.FlowElementReferenceOrValue folderRef = new ToolingService.FlowElementReferenceOrValue();
        folderRef.elementReference = folderName;
        folderTitle.value = folderRef;

        ToolingService.FlowActionCallInputParameter parentFolderUrl = new ToolingService.FlowActionCallInputParameter();
        parentFolderUrl.name = 'parentFolderUrl';
        ToolingService.FlowElementReferenceOrValue parentRef = new ToolingService.FlowElementReferenceOrValue();
        parentRef.stringValue = parentFolderId;
        parentFolderUrl.value = parentRef;
        
        quipAction.inputParameters = new ToolingService.FlowActionCallInputParameter[] { folderTitle, parentFolderUrl };

        ToolingService.FlowNode node = getLastNode(flow, false);
        if (node instanceof ToolingService.FlowRecordLookup) {
            ToolingService.FlowRecordLookup lastNode = (ToolingService.FlowRecordLookup) node;
            ToolingService.FlowConnector connector = new ToolingService.FlowConnector();
            connector.targetReference = quipAction.name;
            lastNode.connector = connector;
            if (!y) {
                quipAction.locationX = lastNode.locationX + 170;
                quipAction.locationY = lastNode.locationY;
            } else {
                quipAction.locationX = lastNode.locationX;
                quipAction.locationY = lastNode.locationY + 170;
            }
        } else if (node instanceof ToolingService.FlowStart) {
            ToolingService.FlowStart lastNode = (ToolingService.FlowStart) node;
            ToolingService.FlowConnector connector = new ToolingService.FlowConnector();
            connector.targetReference = quipAction.name;
            lastNode.connector = connector;
            if (!y) {
                quipAction.locationX = lastNode.locationX + 170;
                quipAction.locationY = lastNode.locationY;
            } else {
                quipAction.locationX = lastNode.locationX;
                quipAction.locationY = lastNode.locationY + 170;
            }
        } else if (node instanceof ToolingService.FlowDecision) {
            ToolingService.FlowDecision lastNode = (ToolingService.FlowDecision) node;
            ToolingService.FlowConnector connector = new ToolingService.FlowConnector();
            connector.targetReference = quipAction.name;
            lastNode.defaultConnector = connector;
            if (!y) {
                quipAction.locationX = lastNode.locationX + 170;
                quipAction.locationY = lastNode.locationY;
            } else {
                quipAction.locationX = lastNode.locationX - 10;
                quipAction.locationY = lastNode.locationY + 170;
            }
        }

        if (flow.actionCalls != null) {
            flow.actionCalls.add(quipAction);
        } else {
            flow.actionCalls = new ToolingService.FlowActionCall[] { quipAction };
        }

        return flow;
    }

    public static ToolingService.Flow addUpdateRecordToFlow(ToolingService.Flow flow, String objectName, String idField, String fieldName, String fieldValue, String actionName, String actionLabel, Boolean y) {
        // Check if it has it already
        if (flow.recordUpdates != null) {
            for (ToolingService.FlowRecordUpdate action : flow.recordUpdates) {
                if (action.name == actionName) {
                    return flow;
                }
            }
        }

        ToolingService.FlowRecordUpdate updateAction = new ToolingService.FlowRecordUpdate();
        updateAction.name = actionName;
        updateAction.label = actionLabel;
        updateAction.object_x = objectName;

        ToolingService.FlowRecordFilter filter = new ToolingService.FlowRecordFilter();
        filter.field = 'Id';
        filter.operator = 'EqualTo';
        ToolingService.FlowElementReferenceOrValue fieldRef = new ToolingService.FlowElementReferenceOrValue();
        fieldRef.elementReference = idField;
        filter.value = fieldRef;
        updateAction.filters = new ToolingService.FlowRecordFilter[]{ filter };

        ToolingService.FlowInputFieldAssignment assignment = new ToolingService.FlowInputFieldAssignment();
        assignment.field = fieldName;
        ToolingService.FlowElementReferenceOrValue valueRef = new ToolingService.FlowElementReferenceOrValue();
        valueRef.elementReference = fieldValue;
        assignment.value = valueRef;
        updateAction.inputAssignments = new ToolingService.FlowInputFieldAssignment[]{ assignment };

        ToolingService.FlowNode node = getLastNode(flow, y);
        if (node instanceof ToolingService.FlowRecordLookup) {
            ToolingService.FlowRecordLookup lastNode = (ToolingService.FlowRecordLookup) node;
            ToolingService.FlowConnector connector = new ToolingService.FlowConnector();
            connector.targetReference = updateAction.name;
            lastNode.connector = connector;
            if (!y) {
                updateAction.locationX = lastNode.locationX + 170;
                updateAction.locationY = lastNode.locationY;
            } else {
                updateAction.locationX = lastNode.locationX;
                updateAction.locationY = lastNode.locationY + 170;
            }
        } else if (node instanceof ToolingService.FlowStart) {
            ToolingService.FlowStart lastNode = (ToolingService.FlowStart) node;
            ToolingService.FlowConnector connector = new ToolingService.FlowConnector();
            connector.targetReference = updateAction.name;
            lastNode.connector = connector;
            if (!y) {
                updateAction.locationX = lastNode.locationX + 170;
                updateAction.locationY = lastNode.locationY;
            } else {
                updateAction.locationX = lastNode.locationX;
                updateAction.locationY = lastNode.locationY + 170;
            }
        } else if (node instanceof ToolingService.FlowDecision) {
            ToolingService.FlowDecision lastNode = (ToolingService.FlowDecision) node;
            ToolingService.FlowConnector connector = new ToolingService.FlowConnector();
            connector.targetReference = updateAction.name;
            lastNode.rules[0].connector = connector;
            if (!y) {
                updateAction.locationX = lastNode.locationX + 170;
                updateAction.locationY = lastNode.locationY;
            } else {
                updateAction.locationX = lastNode.locationX;
                updateAction.locationY = lastNode.locationY + 170;
            }
        } else if (node instanceof ToolingService.FlowActionCall) {
            ToolingService.FlowActionCall lastNode = (ToolingService.FlowActionCall) node;
            ToolingService.FlowConnector connector = new ToolingService.FlowConnector();
            connector.targetReference = updateAction.name;
            lastNode.connector = connector;
            if (!y) {
                updateAction.locationX = lastNode.locationX + 170;
                updateAction.locationY = lastNode.locationY;
            } else {
                updateAction.locationX = lastNode.locationX;
                updateAction.locationY = lastNode.locationY + 170;
            }
        } else if (node instanceof ToolingService.FlowAssignment) {
            ToolingService.FlowAssignment lastNode = (ToolingService.FlowAssignment) node;
            ToolingService.FlowConnector connector = new ToolingService.FlowConnector();
            connector.targetReference = updateAction.name;
            lastNode.connector = connector;
            if (!y) {
                updateAction.locationX = lastNode.locationX + 170;
                updateAction.locationY = lastNode.locationY;
            } else {
                updateAction.locationX = lastNode.locationX;
                updateAction.locationY = lastNode.locationY + 170;
            }
        }

        if (flow.recordUpdates != null) {
            flow.recordUpdates.add(updateAction);
        } else {
            flow.recordUpdates = new ToolingService.FlowRecordUpdate[] { updateAction };
        }

        return flow;
    }

    public static ToolingService.Flow addDecisionToFlow(ToolingService.Flow flow, String[] conditionName, String[] conditionOperator, String[] conditionValue, String actionName, String actionLabel) {
        ToolingService.FlowDecision decision = new ToolingService.FlowDecision();
        decision.name = actionName;
        decision.label = actionLabel;
        decision.locationY = 50;
        decision.defaultConnectorLabel = 'No';

        ToolingService.FlowRule rule = new ToolingService.FlowRule();
        rule.name = actionName + '_Yes';
        rule.label = 'Yes';
        rule.conditionLogic = 'and';

        ToolingService.FlowCondition[] conditions = new ToolingService.FlowCondition[]{};

        for (integer i = 0; i < conditionName.size(); i++) {
            ToolingService.FlowCondition condition = new ToolingService.FlowCondition();
            condition.leftValueReference = conditionName[i];
            condition.operator = conditionOperator[i];

            ToolingService.FlowElementReferenceOrValue rightValueReference = new ToolingService.FlowElementReferenceOrValue();
            if (conditionValue[i].startsWith('Old_')) {
                rightValueReference.elementReference = conditionValue[i];
            } else if (conditionValue[i] == 'true') {
                rightValueReference.booleanValue = true;
            } else if (conditionValue[i] == 'false') {
                rightValueReference.booleanValue = false;
            } else if (conditionValue[i].isNumeric()) {
                rightValueReference.numberValue = Double.valueOf(conditionValue[i]);
            } else {
                try {
                    Decimal decimalValue = Decimal.valueOf(conditionValue[i]);
                    rightValueReference.numberValue = decimalValue;
                } catch (Exception e) {
                    try {
                        Date dateValue = Date.valueOf(conditionValue[i]);
                        rightValueReference.dateValue = dateValue;
                    } catch (Exception e2) {
                        rightValueReference.stringValue = conditionValue[i];
                    }
                }
            }

            condition.rightValue = rightValueReference;
            conditions.add(condition);
        }

        rule.conditions = conditions;

        decision.rules = new ToolingService.FLowRule[]{ rule };

        ToolingService.FlowNode node = getLastNode(flow, false);
        if (node instanceof ToolingService.FlowRecordLookup) {
            ToolingService.FlowRecordLookup lastNode = (ToolingService.FlowRecordLookup) node;
            ToolingService.FlowConnector connector = new ToolingService.FlowConnector();
            connector.targetReference = decision.name;
            lastNode.connector = connector;
            decision.locationX = lastNode.locationX + 170;
        } else if (node instanceof ToolingService.FlowStart) {
            ToolingService.FlowStart lastNode = (ToolingService.FlowStart) node;
            ToolingService.FlowConnector connector = new ToolingService.FlowConnector();
            connector.targetReference = decision.name;
            lastNode.connector = connector;
            decision.locationX = lastNode.locationX + 170;
        } else if (node instanceof ToolingService.FlowDecision) {
            ToolingService.FlowDecision lastNode = (ToolingService.FlowDecision) node;
            ToolingService.FlowConnector connector = new ToolingService.FlowConnector();
            connector.targetReference = decision.name;
            lastNode.rules[0].connector = connector;
            decision.locationX = lastNode.locationX + 170;
        }

        if (flow.decisions != null) {
            flow.decisions.add(decision);
        } else {
            flow.decisions = new ToolingService.FlowDecision[] { decision };
        }

        return flow;
    }

    public static ToolingService.Flow addCreateAccountPlanToProcess(ToolingService.Flow flow, String objectName, String fieldName, String templateUrl, String sharingLevel) {
        return addCopyDocumentActionToProcess(flow, objectName, fieldName, templateUrl, sharingLevel, 'myRule_1_A1', 'Create Account Plan');
    }

    public static ToolingService.Flow addCreateOpportunityNotesToProcess(ToolingService.Flow flow, String objectName, String fieldName, String templateUrl, String sharingLevel) {
        return addCopyDocumentActionToProcess(flow, objectName, fieldName, templateUrl, sharingLevel, 'myRule_1_A1', 'Create Opportunity Notes');
    }

    public static ToolingService.Flow addCreateDocumentToProcess(ToolingService.Flow flow, String objectName, String fieldName, String templateUrl, String sharingLevel) {
        return addCopyDocumentActionToProcess(flow, objectName, fieldName, templateUrl, sharingLevel, 'myRule_1_A1', 'Create Document');
    }

    public static ToolingService.Flow addVariableToProcess(ToolingService.Flow flow, String variableName, String dataType, Boolean isInput, Boolean isOutput, Integer scale) {
        ToolingService.FlowVariable newVariable = new ToolingService.FlowVariable();
        newVariable.name = variableName;
        newVariable.dataType = dataType;
        newVariable.isCollection = false;
        newVariable.isInput = isInput;
        newVariable.isOutput = isOutput;
        newVariable.scale = scale;

        if (flow.variables == null) {
            flow.variables = new ToolingService.FlowVariable[] { newVariable };
        } else {
            flow.variables.add(newVariable);
        }

        return flow;
    }

    public static String saveFlow(ToolingService.Flow flow, boolean activateFlow) {
        if (activateFlow) {
            flow.status = 'Active';
        }

        Map<String, Object> queryResult = Utils.toolingQuery('SELECT Id FROM Flow WHERE MasterLabel like \'' + flow.label + '\'');
        if (!queryResult.containsKey('size')) {
            queryResult.put('size', 0);
        }
        Integer results = (Integer) queryResult.get('size');
        String flowId;
        if (results == 0) {
            flowId = Utils.createToolingObject('Flow', flow);
        } else {
            List<Object> records = (List<Object>) queryResult.get('records');
            Map<String, Object> recordMap = (Map<String, Object>) records[0];
            flowId = (String) recordMap.get('Id');
            Utils.updateToolingObjectMetadata('Flow', flowId, flow);
        }

        return flowId;
    }

    // private static ToolingService.Flow addCopyDocumentActionToFlow(ToolingService.Flow flow, String objectName, String fieldName, String templateUrl, String actionName, String actionLabel) {
    //     // Check if it has it already
    //     if (flow.actionCalls != null) {
    //         for (ToolingService.FlowActionCall action : flow.actionCalls) {
    //             if (action.name == actionName) {
    //                 return flow;
    //             }
    //         }
    //     }

    //     ToolingService.FlowActionCall quipAction = new ToolingService.FlowActionCall();
    //     quipAction.name = actionName;
    //     quipAction.label = actionLabel;
    //     quipAction.locationY = 50;
    //     quipAction.actionName = 'copyQuipDocument';
    //     quipAction.actionType = 'copyQuipDocument';
    //     quipAction.storeOutputAutomatically = true;

    //     ToolingService.FlowActionCallInputParameter sourceDocUrl = new ToolingService.FlowActionCallInputParameter();
    //     sourceDocUrl.name = 'sourceDocumentUrl';
    //     ToolingService.FlowElementReferenceOrValue urlRef = new ToolingService.FlowElementReferenceOrValue();
    //     urlRef.stringValue = templateUrl;
    //     sourceDocUrl.value = urlRef;
        
    //     ToolingService.FlowActionCallInputParameter contextRecordId = new ToolingService.FlowActionCallInputParameter();
    //     contextRecordId.name = 'contextRecordId';
    //     ToolingService.FlowElementReferenceOrValue contextRecordRef = new ToolingService.FlowElementReferenceOrValue();
    //     contextRecordRef.elementReference = objectName + '.Id';
    //     contextRecordId.value = contextRecordRef;

    //     ToolingService.FlowActionCallInputParameter mailMergeRecordId = new ToolingService.FlowActionCallInputParameter();
    //     mailMergeRecordId.name = 'mailMergeRecordId';
    //     ToolingService.FlowElementReferenceOrValue mailMergeRecordRef = new ToolingService.FlowElementReferenceOrValue();
    //     mailMergeRecordRef.elementReference = objectName + '.Id';
    //     mailMergeRecordId.value = mailMergeRecordRef;

    //     ToolingService.FlowActionCallInputParameter targetRecordUrlField = new ToolingService.FlowActionCallInputParameter();
    //     targetRecordUrlField.name = 'targetRecordUrlField';
    //     ToolingService.FlowElementReferenceOrValue targetRecordUrlRef = new ToolingService.FlowElementReferenceOrValue();
    //     targetRecordUrlRef.stringValue = fieldName;
    //     targetRecordUrlField.value = targetRecordUrlRef;

    //     quipAction.inputParameters = new ToolingService.FlowActionCallInputParameter[] { sourceDocUrl, contextRecordId, mailMergeRecordId, targetRecordUrlField };

    //     ToolingService.FlowNode node = getLastNode(flow, false);
    //     if (node instanceof ToolingService.FlowRecordLookup) {
    //         ToolingService.FlowRecordLookup lastNode = (ToolingService.FlowRecordLookup) node;
    //         ToolingService.FlowConnector connector = new ToolingService.FlowConnector();
    //         connector.targetReference = quipAction.name;
    //         lastNode.connector = connector;
    //         quipAction.locationX = lastNode.locationX + 170;
    //     } else if (node instanceof ToolingService.FlowStart) {
    //         ToolingService.FlowStart lastNode = (ToolingService.FlowStart) node;
    //         ToolingService.FlowConnector connector = new ToolingService.FlowConnector();
    //         connector.targetReference = quipAction.name;
    //         lastNode.connector = connector;
    //         quipAction.locationX = lastNode.locationX + 170;
    //     } else if (node instanceof ToolingService.FlowDecision) {
    //         ToolingService.FlowDecision lastNode = (ToolingService.FlowDecision) node;
    //         ToolingService.FlowConnector connector = new ToolingService.FlowConnector();
    //         connector.targetReference = quipAction.name;
    //         lastNode.rules[0].connector = connector;
    //         quipAction.locationX = lastNode.locationX + 170;
    //     }

    //     if (flow.actionCalls != null) {
    //         flow.actionCalls.add(quipAction);
    //     } else {
    //         flow.actionCalls = new ToolingService.FlowActionCall[] { quipAction };
    //     }

    //     return flow;
    // }

    // public static ToolingService.Flow addSendMessageInDocumentActionToFlow(ToolingService.Flow flow, String destinationUrl, String message, String actionName, String actionLabel, Boolean staticDestination) {
    //     // Check if it has it already
    //     if (flow.actionCalls != null) {
    //         for (ToolingService.FlowActionCall action : flow.actionCalls) {
    //             if (action.name == actionName) {
    //                 return flow;
    //             }
    //         }
    //     }

    //     ToolingService.FlowActionCall quipAction = new ToolingService.FlowActionCall();
    //     quipAction.name = actionName;
    //     quipAction.label = actionLabel;
    //     quipAction.locationY = 50;
    //     quipAction.actionName = 'addMessageToQuipDocument';
    //     quipAction.actionType = 'addMessageToQuipDocument';
    //     quipAction.storeOutputAutomatically = true;

    //     ToolingService.FlowActionCallInputParameter documentUrl = new ToolingService.FlowActionCallInputParameter();
    //     documentUrl.name = 'documentUrl';
    //     ToolingService.FlowElementReferenceOrValue urlRef = new ToolingService.FlowElementReferenceOrValue();
    //     if (staticDestination) {
    //         urlRef.stringValue = destinationUrl;
    //     } else {
    //         urlRef.elementReference = destinationUrl;
    //     }
    //     documentUrl.value = urlRef;

    //     ToolingService.FlowActionCallInputParameter messageInput = new ToolingService.FlowActionCallInputParameter();
    //     messageInput.name = 'messageContent';
    //     ToolingService.FlowFormula messageFormula = new ToolingService.FlowFormula();
    //     messageFormula.name = 'Message_Content';
    //     messageFormula.dataType = 'String';
    //     messageFormula.expression = message;
    //     ToolingService.FlowElementReferenceOrValue messageRef = new ToolingService.FlowElementReferenceOrValue();
    //     messageRef.elementReference = messageFormula.name;
    //     messageInput.value = messageRef;
        
    //     quipAction.inputParameters = new ToolingService.FlowActionCallInputParameter[] { documentUrl, messageInput };

    //     ToolingService.FlowNode node = getLastNode(flow, false);
    //     if (node instanceof ToolingService.FlowRecordLookup) {
    //         ToolingService.FlowRecordLookup lastNode = (ToolingService.FlowRecordLookup) node;
    //         ToolingService.FlowConnector connector = new ToolingService.FlowConnector();
    //         connector.targetReference = quipAction.name;
    //         lastNode.connector = connector;
    //         quipAction.locationX = lastNode.locationX + 170;
    //     } else if (node instanceof ToolingService.FlowStart) {
    //         ToolingService.FlowStart lastNode = (ToolingService.FlowStart) node;
    //         ToolingService.FlowConnector connector = new ToolingService.FlowConnector();
    //         connector.targetReference = quipAction.name;
    //         lastNode.connector = connector;
    //         quipAction.locationX = lastNode.locationX + 170;
    //     } else if (node instanceof ToolingService.FlowDecision) {
    //         ToolingService.FlowDecision lastNode = (ToolingService.FlowDecision) node;
    //         ToolingService.FlowConnector connector = new ToolingService.FlowConnector();
    //         connector.targetReference = quipAction.name;
    //         lastNode.rules[0].connector = connector;
    //         quipAction.locationX = lastNode.locationX + 170;
    //     }

    //     if (flow.actionCalls != null) {
    //         flow.actionCalls.add(quipAction);
    //     } else {
    //         flow.actionCalls = new ToolingService.FlowActionCall[] { quipAction };
    //     }

    //     if (flow.formulas != null) {
    //         flow.formulas.add(messageFormula);
    //     } else {
    //         flow.formulas = new ToolingService.FlowFormula[] { messageFormula };
    //     }

    //     return flow;
    // }

    // public static ToolingService.Flow addAssignmentToFlow(ToolingService.Flow flow, String objectName, String fieldName, String fieldValue, String actionName, String actionLabel, Boolean y) {
    //     // Check if it has it already
    //     if (flow.assignments != null) {
    //         for (ToolingService.FlowAssignment action : flow.assignments) {
    //             if (action.name == actionName) {
    //                 return flow;
    //             }
    //         }
    //     }

    //     ToolingService.FlowAssignment assignment = new ToolingService.FlowAssignment();
    //     assignment.name = actionName;
    //     assignment.label = actionLabel;

    //     ToolingService.FlowAssignmentItem item = new ToolingService.FlowAssignmentItem();
    //     item.assignToReference = objectName + '.' + fieldName;
    //     item.operator = 'Assign';
    //     ToolingService.FlowElementReferenceOrValue valueRef = new ToolingService.FlowElementReferenceOrValue();
    //     valueRef.elementReference = fieldValue;
    //     item.value = valueRef;

    //     assignment.assignmentItems = new ToolingService.FlowAssignmentItem[]{ item };

    //     ToolingService.FlowNode node = getLastNode(flow, y);
    //     if (node instanceof ToolingService.FlowRecordLookup) {
    //         ToolingService.FlowRecordLookup lastNode = (ToolingService.FlowRecordLookup) node;
    //         ToolingService.FlowConnector connector = new ToolingService.FlowConnector();
    //         connector.targetReference = assignment.name;
    //         lastNode.connector = connector;
    //         if (!y) {
    //             assignment.locationX = lastNode.locationX + 170;
    //             assignment.locationY = lastNode.locationY;
    //         } else {
    //             assignment.locationX = lastNode.locationX;
    //             assignment.locationY = lastNode.locationY + 170;
    //         }
    //     } else if (node instanceof ToolingService.FlowStart) {
    //         ToolingService.FlowStart lastNode = (ToolingService.FlowStart) node;
    //         ToolingService.FlowConnector connector = new ToolingService.FlowConnector();
    //         connector.targetReference = assignment.name;
    //         lastNode.connector = connector;
    //         if (!y) {
    //             assignment.locationX = lastNode.locationX + 170;
    //             assignment.locationY = lastNode.locationY;
    //         } else {
    //             assignment.locationX = lastNode.locationX;
    //             assignment.locationY = lastNode.locationY + 170;
    //         }
    //     } else if (node instanceof ToolingService.FlowDecision) {
    //         ToolingService.FlowDecision lastNode = (ToolingService.FlowDecision) node;
    //         ToolingService.FlowConnector connector = new ToolingService.FlowConnector();
    //         connector.targetReference = assignment.name;
    //         lastNode.rules[0].connector = connector;
    //         if (!y) {
    //             assignment.locationX = lastNode.locationX + 170;
    //             assignment.locationY = lastNode.locationY;
    //         } else {
    //             assignment.locationX = lastNode.locationX;
    //             assignment.locationY = lastNode.locationY + 170;
    //         }
    //     } else if (node instanceof ToolingService.FlowActionCall) {
    //         ToolingService.FlowActionCall lastNode = (ToolingService.FlowActionCall) node;
    //         ToolingService.FlowConnector connector = new ToolingService.FlowConnector();
    //         connector.targetReference = assignment.name;
    //         lastNode.connector = connector;
    //         if (!y) {
    //             assignment.locationX = lastNode.locationX + 170;
    //             assignment.locationY = lastNode.locationY;
    //         } else {
    //             assignment.locationX = lastNode.locationX;
    //             assignment.locationY = lastNode.locationY + 170;
    //         }
    //     }

    //     if (flow.assignments != null) {
    //         flow.assignments.add(assignment);
    //     } else {
    //         flow.assignments = new ToolingService.FlowAssignment[] { assignment };
    //     }

    //     return flow;
    // }

    // public static ToolingService.Flow addCreateAccountPlanToFlow(ToolingService.Flow flow, String objectName, String fieldName, String templateUrl) {
    //     return addCopyDocumentActionToFlow(flow, objectName, fieldName, templateUrl, 'Create_Account_Plan', 'Create Account Plan');
    // }

    // public static ToolingService.Flow addCreateOpportunityNotesToFlow(ToolingService.Flow flow, String objectName, String fieldName, String templateUrl) {
    //     return addCopyDocumentActionToFlow(flow, objectName, fieldName, templateUrl, 'Create_Opp_Notes', 'Create Opportunity Notes');
    // }

    // public static void setupTriggerForFlow(ToolingService.Flow flow, String objectName, String triggerName, Boolean onCreate) {

    //     String triggerContent;
    //     if (onCreate) {
    //         triggerContent = 'trigger ' + triggerName + ' on ' + objectName + ' (after insert) {\n' +
    //             'for (' + objectName + ' newRecord : Trigger.New) {\n' +
    //             'Flow.Interview flow = new Flow.Interview.' + flow.fullName + '(new Map<String, Object> { \'' + objectName + '\' => newRecord });\n' +
    //             'flow.start();\n' +
    //             '}\n' +
    //             '}';
    //     } else {
    //         triggerContent = 'trigger ' + triggerName + ' on ' + objectName + ' (after update) {\n' +
    //             'for (' + objectName + ' newRecord : Trigger.New) {\n' +
    //             objectName + ' oldRecord = Trigger.oldMap.get(newRecord.Id);\n' +
    //             'Flow.Interview flow = new Flow.Interview.' + flow.fullName + '(new Map<String, Object> { \'' + objectName + '\' => newRecord, \'Old_' + objectName + '\' => oldRecord });\n' +
    //             'flow.start();\n' +
    //             '}\n' +
    //             '}';
    //     }



    //     Map<String, String> body = new Map<String, String>{
    //         'Name' => triggerName,
    //         'TableEnumOrId' => objectName,
    //         'Body' => triggerContent
    //     };
    
    //     String url = Url.getOrgDomainUrl().toExternalForm() + '/services/data/v48.0/tooling/sobjects/ApexTrigger';
    
    //     HttpRequest req = new HttpRequest();
    //     req.setHeader('Authorization', 'OAuth ' + Utils.getSessionIdFromVFPage(Page.SessionPage));
    //     req.setHeader('Content-Type', 'application/json');
    //     req.setMethod('POST');
    //     req.setBody(JSON.serialize(body));
    //     req.setEndpoint(url);
    
    //     HttpResponse res = new Http().send(req);

    //     if (res.getStatusCode() < 200 || res.getStatusCode() > 299) {
    //         throw new QuipHandlerException('Could not create Apex Trigger');
    //     }
    // }
}